# Auto-generated CloudFormation template for Globus Connect Server with S3 Connector
AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template for Globus Connect Server with S3 Connector"

Conditions:
  HasSubscription: !Not [!Equals [!Ref GlobusSubscriptionId, ""]]
  IsProduction: !Equals [!Ref DeploymentType, "Production"]
  UseElasticIP: !Or [!Equals [!Ref DeploymentType, "Production"], !Equals [!Ref ForceElasticIP, "true"]]
  HasS3BucketName: !Not [!Equals [!Ref S3BucketName, ""]]
  DeployS3Connector: !And [!Equals [!Ref EnableS3Connector, "true"], !Condition HasSubscription, !Condition HasS3BucketName]
  HasDefaultAdmin: !Not [!Equals [!Ref DefaultAdminIdentity, ""]]

Parameters:
  ScriptUrl:
    Description: URL to the Globus installation script (e.g., GitHub raw URL)
    Type: String
    Default: "https://raw.githubusercontent.com/scttfrdmn/globus-gcs-s3-deployment/main/scripts/globus-setup.sh"
    
  SetupEnvScriptUrl:
    Description: URL to the Globus environment setup script for debugging
    Type: String
    Default: "https://raw.githubusercontent.com/scttfrdmn/globus-gcs-s3-deployment/main/scripts/setup-env.sh"
    
  DiagnosticsScriptUrl:
    Description: URL to the diagnostics collection script
    Type: String
    Default: "https://raw.githubusercontent.com/scttfrdmn/globus-gcs-s3-deployment/main/scripts/collect-diagnostics.sh"
    
  DebugScriptUrl:
    Description: URL to the debug helper script
    Type: String
    Default: "https://raw.githubusercontent.com/scttfrdmn/globus-gcs-s3-deployment/main/scripts/debug-deployment.sh"
    
  CollectionScriptUrl:
    Description: URL to the collection helper script
    Type: String
    Default: "https://raw.githubusercontent.com/scttfrdmn/globus-gcs-s3-deployment/main/scripts/create-collection.sh"
    
  TeardownScriptUrl:
    Description: URL to the teardown script for cleanup before stack deletion
    Type: String
    Default: "https://raw.githubusercontent.com/scttfrdmn/globus-gcs-s3-deployment/main/scripts/teardown-globus.sh"
    
  DeploymentType:
    Description: Type of deployment (affects resource configuration)
    Type: String
    Default: Integration
    AllowedValues:
      - Integration
      - Production
    ConstraintDescription: Must be either Integration or Production.
    
  ForceElasticIP:
    Description: Force allocation of Elastic IP even for Integration deployment
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
      
  DebugPreserveInstance:
    Description: "Debug mode - keep instances running even when deployment fails (for troubleshooting)"
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    
  # AuthenticationMethod has been removed to simplify and use Globus Auth only
  # This reduces complexity and focuses on the most modern approach
    
  DefaultAdminIdentity:
    Description: "Globus identity to be granted admin access to the endpoint (email@example.org). This identity will also have access to collections if CollectionAdminIdentity is not specified."
    Type: String
    Default: ""
    
  CollectionAdminIdentity:
    Description: "Globus identity to grant admin access to collections (e.g., user@example.edu). If not specified, DefaultAdminIdentity will be used. If both are empty, only the service account will have access to collections."
    Type: String
    Default: ""

  InstanceType:
    Description: EC2 instance type for Globus Connect Server
    Type: String
    Default: m6i.xlarge
    AllowedValues:
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5n.xlarge
      - m5n.2xlarge
      - m5n.4xlarge
      - m6i.xlarge
      - m6i.2xlarge
      - m6i.4xlarge
      - m6in.xlarge
      - m6in.2xlarge
      - m6in.4xlarge
    ConstraintDescription: Must be a valid EC2 instance type.

  KeyName:
    Description: Name of an existing AWS EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair in your AWS account.

  AvailabilityZone:
    Description: The Availability Zone to launch the instance in
    Type: AWS::EC2::AvailabilityZone::Name

  VpcId:
    Description: VPC to deploy Globus Connect Server into
    Type: AWS::EC2::VPC::Id

  SubnetId:
    Description: Subnet within the selected VPC and Availability Zone
    Type: AWS::EC2::Subnet::Id

  GlobusClientId:
    Description: Globus Client ID for registration
    Type: String
    NoEcho: true

  GlobusClientSecret:
    Description: Globus Client Secret for registration
    Type: String
    NoEcho: true

  GlobusSubscriptionId:
    Description: "Globus Subscription ID to join this endpoint to your subscription (REQUIRED for S3 connector). IMPORTANT: The GlobusOwner identity must be configured as an administrator in the subscription membership group by an existing administrator for this to work."
    Type: String
    
  # Connector options
  EnableS3Connector:
    Description: "Whether to enable S3 Connector (requires valid S3BucketName and GlobusSubscriptionId). IMPORTANT: S3 connector requires a Globus subscription, and the GlobusOwner must be configured as an administrator in the subscription group."
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
      
  EnablePOSIXGateway:
    Description: Whether to create a POSIX storage gateway (requires node setup)
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
      
  POSIXGatewayName:
    Description: Display name for the POSIX storage gateway (required if EnablePOSIXGateway is true)
    Type: String
    Default: "Default POSIX Gateway"
    
  POSIXGatewayDomain:
    Description: Optional domain for the POSIX storage gateway
    Type: String
    Default: ""
    
  # Connector specific parameters
  S3BucketName:
    Description: "Name of S3 bucket to connect (REQUIRED when EnableS3Connector is true). IMPORTANT: The bucket must exist in the same region as this deployment, and the instance needs appropriate IAM permissions to access it. The S3 connector additionally requires a valid subscription ID and the GlobusOwner must be a subscription administrator."
    Type: String
    AllowedPattern: "[a-zA-Z0-9\\-\\.]{3,63}"
    ConstraintDescription: Bucket name must be between 3 and 63 characters, contain only letters, numbers, hyphens, and periods.
    
  S3GatewayDisplayName:
    Description: "Display name for the S3 storage gateway (REQUIRED when EnableS3Connector is true)."
    Type: String
    Default: "S3 Bucket Gateway"
    
  S3GatewayDomain:
    Description: "Optional domain for the S3 storage gateway (e.g. 'amazon.com'). Leave empty to omit domain parameter."
    Type: String
    Default: ""
    
  GlobusDisplayName:
    Description: Display name for the Globus endpoint (REQUIRED - must be unique)
    Type: String
    AllowedPattern: "[A-Za-z0-9\\-_\\.\\s]+"
    ConstraintDescription: "Display name can include letters, numbers, spaces, hyphens, underscores, and periods."
    
  GlobusOrganization:
    Description: Organization name for the Globus endpoint (REQUIRED - visible to users)
    Type: String
    AllowedPattern: "[A-Za-z0-9\\-_\\.\\s]+"
    ConstraintDescription: "Organization name can include letters, numbers, spaces, hyphens, underscores, and periods."
    
  GlobusOwner:
    Description: Identity username of the endpoint owner (e.g. user@example.edu)
    Type: String
    Default: ""
    
  GlobusContactEmail:
    Description: Email address for the support contact for this endpoint (visible to users)
    Type: String
    Default: "admin@example.com"
    
  GlobusProjectId:
    Description: Globus Auth project ID where this endpoint will be registered (REQUIRED for service identity authentication)
    Type: String
    
  GlobusProjectName:
    Description: (Optional) Name of the Auth project for the new endpoint client 
    Type: String
    Default: ""
    
  GlobusProjectAdmin:
    Description: (Optional) Globus username of the admin of the Auth project
    Type: String
    Default: ""
    
  GlobusAlwaysCreateProject:
    Description: Create a new auth project for this endpoint even if you already have one
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
      
  ResetEndpointOwner:
    Description: Reset the endpoint's advertised owner after setup for better visibility (runs automatically after deployment)
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
      
  EndpointResetOwnerTarget:
    Description: Which identity to set as the advertised owner (if ResetEndpointOwner is true)
    Type: String
    Default: "GlobusOwner"
    AllowedValues:
      - "GlobusOwner"
      - "DefaultAdminIdentity"
      - "GlobusContactEmail"

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-01896de842c443b1b # Ubuntu 22.04 LTS AMI in us-east-1
    us-east-2:
      AMI: ami-0e83be366243f524a # Ubuntu 22.04 LTS AMI in us-east-2
    us-west-1:
      AMI: ami-0487b1fe60c1fd1a2 # Ubuntu 22.04 LTS AMI in us-west-1
    us-west-2:
      AMI: ami-03f65b8614a860c29 # Ubuntu 22.04 LTS AMI in us-west-2
    eu-west-1:
      AMI: ami-0ec7f9846a9d38ac7 # Ubuntu 22.04 LTS AMI in eu-west-1
    eu-central-1:
      AMI: ami-0caef02b518350c8f # Ubuntu 22.04 LTS AMI in eu-central-1
    ap-northeast-1:
      AMI: ami-03a2bb16327aeaa38 # Ubuntu 22.04 LTS AMI in ap-northeast-1
    ap-southeast-1:
      AMI: ami-078c2ea6f5c9de06a # Ubuntu 22.04 LTS AMI in ap-southeast-1
    ap-southeast-2:
      AMI: ami-0d0af5dfe4b9ecf54 # Ubuntu 22.04 LTS AMI in ap-southeast-2

Resources:
  GlobusServerElasticIP:
    Type: AWS::EC2::EIP
    Condition: UseElasticIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: globus-server-eip
          
  GlobusServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and Globus Connect Server ports
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS for Globus Connect Server
        - IpProtocol: tcp
          FromPort: 2811
          ToPort: 2811
          CidrIp: 0.0.0.0/0
          Description: GridFTP control channel
        - IpProtocol: tcp
          FromPort: 7512
          ToPort: 7512
          CidrIp: 0.0.0.0/0
          Description: Globus Connect Server authentication
        - IpProtocol: tcp
          FromPort: 50000
          ToPort: 51000
          CidrIp: 0.0.0.0/0
          Description: GridFTP data channels
      Tags:
        - Key: Name
          Value: globus-server-sg

  GlobusServerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: "/"

  GlobusServerS3Policy:
    Type: AWS::IAM::Policy
    Condition: DeployS3Connector
    Properties:
      PolicyName: GlobusServerS3Access
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetBucketLocation
            Resource: !Sub "arn:aws:s3:::${S3BucketName}"
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
              - s3:ListMultipartUploadParts
              - s3:AbortMultipartUpload
            Resource: !Sub "arn:aws:s3:::${S3BucketName}/*"
          - Effect: Allow
            Action:
              - ec2:CreateTags
            Resource: !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
      Roles:
        - !Ref GlobusServerRole

  GlobusServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref GlobusServerRole

  GlobusServerInstance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
    # Keep instances on failure for debugging
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      AvailabilityZone: !Ref AvailabilityZone
      IamInstanceProfile: !Ref GlobusServerInstanceProfile
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      NetworkInterfaces:
        - AssociatePublicIpAddress: !If [UseElasticIP, false, true]
          DeviceIndex: "0"
          GroupSet:
            - !GetAtt GlobusServerSecurityGroup.GroupId
          SubnetId: !Ref SubnetId
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 100
            VolumeType: gp3
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Simplified bootstrap script for Globus Connect Server deployment
          exec > >(tee /var/log/user-data.log | logger -t user-data -s 2>/dev/console) 2>&1
          set -e
          
          echo "=== BOOTSTRAP START: $(date) ==="
          mkdir -p /home/ubuntu && chmod 755 /home/ubuntu
          
          # CloudFormation signaling function
          signal_cf() {
            local exit_code=$1
            echo "Signaling CloudFormation with status code: $exit_code"
            
            if [ -f /opt/aws/bin/cfn-signal ]; then
              /opt/aws/bin/cfn-signal -e $exit_code --stack ${AWS::StackName} --resource GlobusServerInstance --region ${AWS::Region}
            elif command -v cfn-signal >/dev/null 2>&1; then
              cfn-signal -e $exit_code --stack ${AWS::StackName} --resource GlobusServerInstance --region ${AWS::Region}
            else
              echo "No cfn-signal found, installing AWS CFN tools..."
              apt-get update -qq && apt-get install -y python3-pip
              pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
              echo "Signaling with installed tools..."
              /usr/local/bin/cfn-signal -e $exit_code --stack ${AWS::StackName} --resource GlobusServerInstance --region ${AWS::Region}
            fi
          }
          
          # Error handler - signal failure to CloudFormation
          handle_error() {
            echo "=============================================================" | tee /home/ubuntu/BOOTSTRAP_ERROR.txt
            echo "ERROR: Bootstrap failed at line $1 with exit code $2" | tee -a /home/ubuntu/BOOTSTRAP_ERROR.txt
            echo "Command: $BASH_COMMAND" >> /home/ubuntu/BOOTSTRAP_ERROR.txt
            echo "Time: $(date)" >> /home/ubuntu/BOOTSTRAP_ERROR.txt
            echo "=============================================================" | tee -a /home/ubuntu/BOOTSTRAP_ERROR.txt
            
            # Signal failure to CloudFormation so instance is terminated
            echo "Signaling failure to CloudFormation"
            signal_cf 1
            exit 1
          }
          trap 'handle_error $LINENO $?' ERR
          
          # Install dependencies
          echo "Installing dependencies..."
          apt-get update
          apt-get install -y python3-pip curl wget awscli
          
          # Setup CFN tools
          echo "Setting up CloudFormation tools..."
          pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          mkdir -p /opt/aws/bin
          ln -sf /usr/local/bin/cfn-* /opt/aws/bin/ 2>/dev/null || true
          
          # Set environment variables
          echo "Setting critical environment variables..."
          export GLOBUS_CLIENT_ID="${GlobusClientId}" 
          export GLOBUS_CLIENT_SECRET="${GlobusClientSecret}"
          export GLOBUS_DISPLAY_NAME="${GlobusDisplayName}"
          export GLOBUS_ORGANIZATION="${GlobusOrganization}"
          export GLOBUS_OWNER="${GlobusOwner}"
          export GLOBUS_CONTACT_EMAIL="${GlobusContactEmail}"
          export GLOBUS_PROJECT_ID="${GlobusProjectId}"
          
          # Optional subscription ID for managed endpoint
          export GLOBUS_SUBSCRIPTION_ID="${GlobusSubscriptionId}"
          
          # Optional POSIX gateway configuration
          export ENABLE_POSIX_GATEWAY="${EnablePOSIXGateway}"
          export POSIX_GATEWAY_NAME="${POSIXGatewayName}"
          export POSIX_GATEWAY_DOMAIN="${POSIXGatewayDomain}"
          
          # Optional S3 connector configuration
          export ENABLE_S3_CONNECTOR="${EnableS3Connector}"
          export S3_BUCKET_NAME="${S3BucketName}"
          export S3_GATEWAY_DISPLAY_NAME="${S3GatewayDisplayName}"
          export S3_GATEWAY_DOMAIN="${S3GatewayDomain}"
          
          # Collection access configuration
          export COLLECTION_ADMIN_IDENTITY="${CollectionAdminIdentity}"
          export DEFAULT_ADMIN_IDENTITY="${DefaultAdminIdentity}"
          
          # Debug configuration
          export PRESERVE_INSTANCE="${DebugPreserveInstance}"
          
          # Endpoint owner configuration
          export RESET_ENDPOINT_OWNER="${ResetEndpointOwner}"
          export ENDPOINT_RESET_OWNER_TARGET="${EndpointResetOwnerTarget}"
          
          # Download the installation script
          echo "Downloading Globus setup script from ${ScriptUrl}"
          curl -s -L -o /tmp/globus-setup.sh "${ScriptUrl}" || wget -q -O /tmp/globus-setup.sh "${ScriptUrl}"
          
          # Download the environment setup helper script
          echo "Downloading Globus environment setup script from ${SetupEnvScriptUrl}"
          curl -s -L -o /home/ubuntu/setup-env.sh "${SetupEnvScriptUrl}" || wget -q -O /home/ubuntu/setup-env.sh "${SetupEnvScriptUrl}"
          chmod +x /home/ubuntu/setup-env.sh
          chown ubuntu:ubuntu /home/ubuntu/setup-env.sh
          
          if [ ! -s /tmp/globus-setup.sh ]; then
            echo "ERROR: Failed to download script" > /home/ubuntu/DOWNLOAD_FAILED.txt
            signal_cf 1
            exit 1
          fi
          
          # Prepare for execution
          chmod +x /tmp/globus-setup.sh
          cp /tmp/globus-setup.sh /home/ubuntu/globus-setup.sh
          echo "Starting Globus setup: $(date)" > /home/ubuntu/BOOTSTRAP_STARTED.txt
          
          # Run the setup script with better error handling
          echo "Running Globus setup script..."
          
          # Start watching for errors immediately and capture output
          sudo -E bash /tmp/globus-setup.sh > /var/log/globus-setup-output.log 2>&1
          SETUP_EXIT_CODE=$?
          
          # Copy the logs to help with debugging
          cp /var/log/globus-setup-output.log /home/ubuntu/
          cp /var/log/globus-setup.log /home/ubuntu/ 2>/dev/null || true
          cp /var/log/cloud-init-output.log /home/ubuntu/ 2>/dev/null || true
          
          # Fix permissions for all files
          find /home/ubuntu -type f -exec chown ubuntu:ubuntu {} \; 2>/dev/null || true
          find /home/ubuntu -type f -name "*.sh" -exec chmod +x {} \; 2>/dev/null || true
          
          # Check setup result
          if [ $SETUP_EXIT_CODE -ne 0 ]; then
            echo "Globus setup script failed with exit code: $SETUP_EXIT_CODE" > /home/ubuntu/SETUP_FAILED.txt
            echo "Running diagnostics collection script..." >> /home/ubuntu/SETUP_FAILED.txt
            
            # Run diagnostics collection script
            bash /home/ubuntu/collect-diagnostics.sh > /home/ubuntu/diagnostics-output.txt 2>&1
            
            # Log additional diagnostic information
            echo "Instance ID: $(curl -s http://169.254.169.254/latest/meta-data/instance-id)" >> /home/ubuntu/diagnostics/instance-info.txt
            echo "Public IP: $(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)" >> /home/ubuntu/diagnostics/instance-info.txt
            echo "Public hostname: $(curl -s http://169.254.169.254/latest/meta-data/public-hostname)" >> /home/ubuntu/diagnostics/instance-info.txt
            
            # Don't signal failure to CloudFormation if in debug mode
            if [[ "$PRESERVE_INSTANCE" == "false" ]]; then
              echo "Signaling failure to CloudFormation (instance will be deleted)" >> /home/ubuntu/SETUP_FAILED.txt
              signal_cf 1
              exit 1
            else
              echo "Debug mode enabled - preserving instance despite failure" >> /home/ubuntu/SETUP_FAILED.txt
              echo "You can SSH to this instance to diagnose issues" >> /home/ubuntu/SETUP_FAILED.txt
              echo "After connecting, run: bash /home/ubuntu/debug-deployment.sh" >> /home/ubuntu/SETUP_FAILED.txt
              echo "Diagnostics have been collected in: /home/ubuntu/diagnostics/" >> /home/ubuntu/SETUP_FAILED.txt
              
              # Set proper ownership so the ubuntu user can access everything
              find /home/ubuntu -type f -exec chown ubuntu:ubuntu {} \; 2>/dev/null || true
              find /home/ubuntu -type d -exec chown ubuntu:ubuntu {} \; 2>/dev/null || true
              
              # Still signal success to CloudFormation to prevent rollback
              signal_cf 0
            fi
          fi
          
          # Mark bootstrap completion
          echo "Bootstrap completed at $(date)" > /home/ubuntu/BOOTSTRAP_COMPLETED.txt
          
          # Download the helper scripts
          echo "Downloading helper scripts..."
          curl -s -L -o /home/ubuntu/collect-diagnostics.sh "${DiagnosticsScriptUrl}" || wget -q -O /home/ubuntu/collect-diagnostics.sh "${DiagnosticsScriptUrl}"
          curl -s -L -o /home/ubuntu/debug-deployment.sh "${DebugScriptUrl}" || wget -q -O /home/ubuntu/debug-deployment.sh "${DebugScriptUrl}"
          curl -s -L -o /home/ubuntu/create-collection.sh "${CollectionScriptUrl}" || wget -q -O /home/ubuntu/create-collection.sh "${CollectionScriptUrl}"
          curl -s -L -o /home/ubuntu/teardown-globus.sh "${TeardownScriptUrl}" || wget -q -O /home/ubuntu/teardown-globus.sh "${TeardownScriptUrl}"
          
          # Make the scripts executable
          chmod +x /home/ubuntu/collect-diagnostics.sh /home/ubuntu/debug-deployment.sh /home/ubuntu/create-collection.sh /home/ubuntu/teardown-globus.sh
          chown ubuntu:ubuntu /home/ubuntu/collect-diagnostics.sh /home/ubuntu/debug-deployment.sh /home/ubuntu/create-collection.sh /home/ubuntu/teardown-globus.sh
          
          # Create a teardown instructions file
          echo "TEARDOWN INSTRUCTIONS" > /home/ubuntu/TEARDOWN_INSTRUCTIONS.txt
          echo "" >> /home/ubuntu/TEARDOWN_INSTRUCTIONS.txt
          echo "Before deleting this CloudFormation stack, run this command to clean up Globus resources:" >> /home/ubuntu/TEARDOWN_INSTRUCTIONS.txt
          echo "bash /home/ubuntu/teardown-globus.sh" >> /home/ubuntu/TEARDOWN_INSTRUCTIONS.txt
          chown ubuntu:ubuntu /home/ubuntu/TEARDOWN_INSTRUCTIONS.txt
          
          # Set directory permissions first
          mkdir -p /home/ubuntu
          chmod 755 /home/ubuntu
          chown ubuntu:ubuntu /home/ubuntu

          # Create empty files to ensure they exist
          for var_file in globus-client-id.txt globus-client-secret.txt globus-display-name.txt globus-organization.txt globus-owner.txt globus-contact-email.txt globus-project-id.txt collection-admin-identity.txt default-admin-identity.txt endpoint-uuid.txt subscription-id.txt s3-bucket-name.txt; do
            touch /home/ubuntu/$var_file
            chown ubuntu:ubuntu /home/ubuntu/$var_file
          done

          # Set file permissions
          for f in $(find /home/ubuntu -type f); do
            chown ubuntu:ubuntu "$f"
          done
          
          # Set restrictive permissions on credential files
          chmod 600 /home/ubuntu/globus-client-id.txt
          chmod 600 /home/ubuntu/globus-client-secret.txt
          
          # Make scripts executable
          for f in $(find /home/ubuntu -name "*.sh"); do
            chmod +x "$f"
            chown ubuntu:ubuntu "$f"
          done
          
          # Signal success to CloudFormation
          echo "=== BOOTSTRAP COMPLETE: $(date) ==="
          signal_cf 0
      Tags:
        - Key: Name
          Value: globus-connect-server
          
  GlobusServerIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Condition: UseElasticIP
    Properties:
      AllocationId: !GetAtt GlobusServerElasticIP.AllocationId
      InstanceId: !Ref GlobusServerInstance

Outputs:
  InstanceId:
    Description: Instance ID of the Globus Connect Server
    Value: !Ref GlobusServerInstance

  PrivateIP:
    Description: Private IP address of the Globus Connect Server
    Value: !GetAtt GlobusServerInstance.PrivateIp

  ElasticIP:
    Description: Elastic IP address assigned to the Globus Connect Server
    Condition: UseElasticIP
    Value: !Ref GlobusServerElasticIP
    
  PublicDNS:
    Description: Public DNS name of the Globus Connect Server
    Value: !GetAtt GlobusServerInstance.PublicDnsName

  GlobusEndpointURL:
    Description: URL to access the Globus Endpoint
    Value: "https://app.globus.org/file-manager (Search for endpoint by name or UUID after registration)"
    
  SubscriptionStatus:
    Description: Globus Subscription Status
    Value: !If [HasSubscription, "Endpoint joined to subscription", "No subscription ID provided"]
    
  PublicAddress:
    Description: Public address to use for Globus redirect URI configuration
    Value: !If 
      - UseElasticIP
      - !Join ["", ["https://", !GetAtt GlobusServerElasticIP.PublicIp]]
      - !Sub "https://${GlobusServerInstance.PublicDnsName}"

  S3BucketConnected:
    Description: S3 Bucket connected to Globus
    Condition: DeployS3Connector
    Value: !Ref S3BucketName
    
  ConnectorsEnabled:
    Description: Connectors that were enabled for this deployment
    Value: !If 
      - DeployS3Connector
      - "S3 Connector"
      - "No connectors enabled (subscription required or S3 not enabled)"
    
  DeploymentConfiguration:
    Description: Deployment configuration information
    Value: !If 
      - UseElasticIP
      - !If [IsProduction, "Production deployment with Elastic IP", "Integration deployment with Elastic IP (forced)"]
      - "Integration deployment with dynamic public IP"
      
  AuthenticationConfiguration:
    Description: Authentication method configured for Globus
    Value: "Globus Auth (identity federation)"
      
  InitialAccessInfo:
    Description: Initial access configuration
    Value: !If 
      - HasDefaultAdmin
      - !Join ["", ["Admin access granted to ", !Ref DefaultAdminIdentity]]
      - "No default admin configured - access policies must be set manually"