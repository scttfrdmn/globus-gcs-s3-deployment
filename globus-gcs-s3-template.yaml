AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template for Globus Connect Server with S3 Connector"

Conditions:
  HasSubscription: !Not [!Equals [!Ref GlobusSubscriptionId, ""]]
  IsProduction: !Equals [!Ref DeploymentType, "Production"]
  UseElasticIP: !Or [!Equals [!Ref DeploymentType, "Production"], !Equals [!Ref ForceElasticIP, "true"]]
  HasS3BucketName: !Not [!Equals [!Ref S3BucketName, ""]]
  DeployS3Connector: !And [!Equals [!Ref EnableS3Connector, "true"], !Condition HasSubscription, !Condition HasS3BucketName]
  UseGlobusAuth: !Equals [!Ref AuthenticationMethod, "Globus"]
  HasDefaultAdmin: !Not [!Equals [!Ref DefaultAdminIdentity, ""]]

Parameters:
  DeploymentType:
    Description: Type of deployment (affects resource configuration)
    Type: String
    Default: Integration
    AllowedValues:
      - Integration
      - Production
    ConstraintDescription: Must be either Integration or Production.
    
  ForceElasticIP:
    Description: Force allocation of Elastic IP even for Integration deployment
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
    
  AuthenticationMethod:
    Description: Authentication method for the Globus Connect Server
    Type: String
    Default: Globus
    AllowedValues:
      - Globus
      - MyProxy
    ConstraintDescription: Must be either Globus (for identity federation) or MyProxy (for local accounts).
    
  DefaultAdminIdentity:
    Description: Globus identity to be granted admin access (email@example.org)
    Type: String
    Default: ""

  InstanceType:
    Description: EC2 instance type for Globus Connect Server
    Type: String
    Default: m6i.xlarge
    AllowedValues:
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5n.xlarge
      - m5n.2xlarge
      - m5n.4xlarge
      - m6i.xlarge
      - m6i.2xlarge
      - m6i.4xlarge
      - m6in.xlarge
      - m6in.2xlarge
      - m6in.4xlarge
    ConstraintDescription: Must be a valid EC2 instance type.

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.

  AvailabilityZone:
    Description: The Availability Zone to launch the instance in
    Type: AWS::EC2::AvailabilityZone::Name

  VpcId:
    Description: VPC to deploy Globus Connect Server into
    Type: AWS::EC2::VPC::Id

  SubnetId:
    Description: Subnet within the selected VPC and Availability Zone
    Type: AWS::EC2::Subnet::Id

# S3BucketName parameter moved below with the other connector parameters

  GlobusClientId:
    Description: Globus Client ID for registration
    Type: String
    NoEcho: true

  GlobusClientSecret:
    Description: Globus Client Secret for registration
    Type: String
    NoEcho: true

  GlobusSubscriptionId:
    Description: (Optional) Globus Subscription ID to join this endpoint to your subscription
    Type: String
    Default: ""
    
  # Connector options
  EnableS3Connector:
    Description: Enable S3 Connector (requires subscription)
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    
  # Connector specific parameters
  S3BucketName:
    Description: Name of S3 bucket to connect (if S3 Connector is enabled)
    Type: String
    Default: ""
    AllowedPattern: "^$|[a-zA-Z0-9\\-\\.]{3,63}"
    ConstraintDescription: Bucket name must be between 3 and 63 characters, contain only letters, numbers, hyphens, and periods.
    

  GlobusDisplayName:
    Description: Display name for the Globus endpoint
    Type: String
    Default: "AWS-GCS-S3-Endpoint"

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-01896de842c443b1b # Ubuntu 22.04 LTS AMI in us-east-1
    us-east-2:
      AMI: ami-0e83be366243f524a # Ubuntu 22.04 LTS AMI in us-east-2
    us-west-1:
      AMI: ami-0487b1fe60c1fd1a2 # Ubuntu 22.04 LTS AMI in us-west-1
    us-west-2:
      AMI: ami-03f65b8614a860c29 # Ubuntu 22.04 LTS AMI in us-west-2
    eu-west-1:
      AMI: ami-0ec7f9846a9d38ac7 # Ubuntu 22.04 LTS AMI in eu-west-1
    eu-central-1:
      AMI: ami-0caef02b518350c8f # Ubuntu 22.04 LTS AMI in eu-central-1
    ap-northeast-1:
      AMI: ami-03a2bb16327aeaa38 # Ubuntu 22.04 LTS AMI in ap-northeast-1
    ap-southeast-1:
      AMI: ami-078c2ea6f5c9de06a # Ubuntu 22.04 LTS AMI in ap-southeast-1
    ap-southeast-2:
      AMI: ami-0d0af5dfe4b9ecf54 # Ubuntu 22.04 LTS AMI in ap-southeast-2

Resources:
  GlobusServerElasticIP:
    Type: AWS::EC2::EIP
    Condition: UseElasticIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: globus-server-eip
          
  GlobusServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and Globus Connect Server ports
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS for Globus Connect Server
        - IpProtocol: tcp
          FromPort: 2811
          ToPort: 2811
          CidrIp: 0.0.0.0/0
          Description: GridFTP control channel
        - IpProtocol: tcp
          FromPort: 7512
          ToPort: 7512
          CidrIp: 0.0.0.0/0
          Description: Globus Connect Server authentication
        - IpProtocol: tcp
          FromPort: 50000
          ToPort: 51000
          CidrIp: 0.0.0.0/0
          Description: GridFTP data channels
      Tags:
        - Key: Name
          Value: globus-server-sg

  GlobusServerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: "/"

  GlobusServerS3Policy:
    Type: AWS::IAM::Policy
    Condition: DeployS3Connector
    Properties:
      PolicyName: GlobusServerS3Access
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetBucketLocation
            Resource: !Sub "arn:aws:s3:::${S3BucketName}"
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
              - s3:ListMultipartUploadParts
              - s3:AbortMultipartUpload
            Resource: !Sub "arn:aws:s3:::${S3BucketName}/*"
          - Effect: Allow
            Action:
              - ec2:CreateTags
            Resource: !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
      Roles:
        - !Ref GlobusServerRole

  GlobusServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref GlobusServerRole

  GlobusServerInstance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      AvailabilityZone: !Ref AvailabilityZone
      IamInstanceProfile: !Ref GlobusServerInstanceProfile
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      NetworkInterfaces:
        - AssociatePublicIpAddress: !If [UseElasticIP, false, true]
          DeviceIndex: "0"
          GroupSet:
            - !GetAtt GlobusServerSecurityGroup.GroupId
          SubnetId: !Ref SubnetId
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 100
            VolumeType: gp3
            DeleteOnTermination: true
      UserData:
        Fn::Base64:
          !Join [ "", [
            "#!/bin/bash\n",
            "# Cloud-init script for installing Globus Connect Server\n",
            "cd /\n",
            "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n",
            "echo \"=== GLOBUS-CONNECT-SERVER-DEPLOYMENT-SCRIPT ===\"\n",
            "echo \"=== Starting Globus Connect Server deployment $(date) ===\"\n",
            "echo \"Stack:", { "Ref": "AWS::StackName" }, " Region:", { "Ref": "AWS::Region" }, " Type:", { "Ref": "DeploymentType" }, " Auth:", { "Ref": "AuthenticationMethod" }, "\"\n",
            "echo \"S3 Connector: ", { "Ref": "EnableS3Connector" }, " Bucket: ", { "Ref": "S3BucketName" }, "\"\n",
            "# Improved error handling - log errors but don't terminate script\n",
            "function handle_error {\n",
            "  local exit_code=$1\n",
            "  local error_message=$2\n",
            "  local stage=$3\n",
            "  echo \"ERROR: $error_message (Exit code: $exit_code)\" | tee -a /home/ubuntu/deployment-error.txt\n",
            "  echo \"$(date) - Error in stage: $stage\" >> /home/ubuntu/deployment-error.txt\n",
            "  logger -t \"globus-deploy\" \"ERROR in $stage: $error_message (code: $exit_code)\"\n",
            "  if [ \"$SHOULD_FAIL\" = \"yes\" ]; then\n",
            "    /opt/aws/bin/cfn-signal -e $exit_code --stack ", { "Ref": "AWS::StackName" }, " --resource GlobusServerInstance --region ", { "Ref": "AWS::Region" }, "\n",
            "    exit $exit_code\n",
            "  else\n",
            "    return 0\n",
            "  fi\n",
            "}\n",
            "SHOULD_FAIL=\"no\"\n",
            "# Create a debug file to make it easier to diagnose cloud-init issues\n",
            "echo \"Cloud-init script started at $(date)\" > /home/ubuntu/cloud-init-debug.log\n",
            "echo \"Script running as: $(id)\" >> /home/ubuntu/cloud-init-debug.log\n",
            "# Install packages with retry mechanism for robustness\n",
            "echo \"===== [1/10] Updating package lists =====\" | tee -a /home/ubuntu/cloud-init-debug.log\n",
            "for i in {1..3}; do\n",
            "  echo \"Attempt $i: apt-get update\" >> /home/ubuntu/cloud-init-debug.log\n",
            "  apt-get update && break\n",
            "  sleep 5\n",
            "done\n",
            "echo \"===== [2/10] Installing base packages =====\" | tee -a /home/ubuntu/cloud-init-debug.log\n",
            "for i in {1..3}; do\n",
            "  echo \"Attempt $i: Installing packages\" >> /home/ubuntu/cloud-init-debug.log\n",
            "  apt-get install -y python3-pip jq curl wget gnupg gnupg2 gpg software-properties-common dnsutils apt-transport-https ca-certificates && break\n",
            "  sleep 5\n",
            "  [ $i -eq 3 ] && handle_error $? \"Package install failed after 3 attempts\" \"packages\"\n",
            "done\n",
            "echo \"===== [3/10] Installing AWS tools =====\" | tee -a /home/ubuntu/cloud-init-debug.log\n",
            "pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz || handle_error $? \"Failed to install cfn-bootstrap\" \"aws-tools\"\n",
            "mkdir -p /opt/aws/bin && ln -sf /usr/local/bin/cfn-* /opt/aws/bin/ || echo \"WARNING: Could not link cfn tools to /opt/aws/bin\"\n",
            "pip3 install --upgrade awscli || echo \"AWS CLI install warning (non-critical)\"\n",
            "if [ -f /opt/aws/bin/cfn-signal ]; then\n",
            "  echo \"CloudFormation tools installed successfully\" >> /home/ubuntu/cloud-init-debug.log\n",
            "else\n",
            "  echo \"WARNING: CloudFormation tools not found at expected location\" >> /home/ubuntu/cloud-init-debug.log\n",
            "fi\n",
            "# Install Globus Connect Server following official Ubuntu installation instructions\n",
            "echo \"===== [4/10] Beginning Globus Connect Server installation =====\" | tee -a /home/ubuntu/cloud-init-debug.log\n",
            "echo \"===== [5/10] Downloading Globus repository package =====\" | tee -a /home/ubuntu/cloud-init-debug.log\n",
            "for i in {1..3}; do\n",
            "  echo \"Attempt $i: Downloading repository package\" >> /home/ubuntu/cloud-init-debug.log\n",
            "  curl -LOs https://downloads.globus.org/globus-connect-server/stable/installers/repo/deb/globus-repo_latest_all.deb && break\n",
            "  sleep 5\n",
            "  [ $i -eq 3 ] && handle_error $? \"Failed to download Globus repository package after 3 attempts\" \"repo-download\"\n",
            "done\n",
            "if [ -f globus-repo_latest_all.deb ]; then\n",
            "  echo \"Repository package downloaded successfully: $(ls -l globus-repo_latest_all.deb)\" >> /home/ubuntu/cloud-init-debug.log\n",
            "else\n",
            "  echo \"WARNING: Repository package not found after download\" >> /home/ubuntu/cloud-init-debug.log\n",
            "  ls -l >> /home/ubuntu/cloud-init-debug.log\n",
            "fi\n",
            "echo \"===== [6/10] Installing Globus repository package =====\" | tee -a /home/ubuntu/cloud-init-debug.log\n",
            "dpkg -i globus-repo_latest_all.deb || handle_error $? \"Failed to install Globus repository package\" \"repo-install\"\n",
            "if [ -f /etc/apt/sources.list.d/globus.list ]; then\n",
            "  echo \"Repository configuration installed: $(cat /etc/apt/sources.list.d/globus.list)\" >> /home/ubuntu/cloud-init-debug.log\n",
            "else\n",
            "  echo \"WARNING: Globus repository configuration not found\" >> /home/ubuntu/cloud-init-debug.log\n",
            "  ls -l /etc/apt/sources.list.d/ >> /home/ubuntu/cloud-init-debug.log\n",
            "fi\n",
            "echo \"===== [7/10] Updating package lists for Globus repo =====\" | tee -a /home/ubuntu/cloud-init-debug.log\n",
            "for i in {1..3}; do\n",
            "  echo \"Attempt $i: apt-get update\" >> /home/ubuntu/cloud-init-debug.log\n",
            "  apt-get update && break\n",
            "  sleep 5\n",
            "  [ $i -eq 3 ] && handle_error $? \"Failed to update package lists after 3 attempts\" \"apt-update\"\n",
            "done\n",
            "echo \"===== [8/10] Installing Globus Connect Server package =====\" | tee -a /home/ubuntu/cloud-init-debug.log\n",
            "for i in {1..3}; do\n",
            "  echo \"Attempt $i: Installing globus-connect-server54\" >> /home/ubuntu/cloud-init-debug.log\n",
            "  DEBIAN_FRONTEND=noninteractive apt-get install -y globus-connect-server54 && break\n",
            "  sleep 5\n",
            "  [ $i -eq 3 ] && handle_error $? \"Failed to install Globus Connect Server package after 3 attempts\" \"gcs-install\"\n",
            "done\n",
            "echo \"Verifying Globus Connect Server installation:\" >> /home/ubuntu/cloud-init-debug.log\n",
            "dpkg -l | grep globus >> /home/ubuntu/cloud-init-debug.log\n",
            "which globus-connect-server >> /home/ubuntu/cloud-init-debug.log\n",
            "# Check version and capabilities (using the version 5.4 command)\n",
            "GCS_VERSION=$(globus-connect-server --version 2>&1 | head -1 | awk '{print $NF}')\n",
            "echo \"Globus version: $GCS_VERSION ($(which globus-connect-server || echo \"command not found\"))\"\n",
            "NEEDS_CLIENT_ID=false\n",
            "# Create configuration directories and files\n",
            "mkdir -p /etc/globus-connect-server\n",
            "# Create the configuration file based on authentication method\n",
            "HOST=$(hostname -f)\n",
            "CONFIG_FILE=\"/etc/globus-connect-server/globus-connect-server.conf\"\n",
            "# First part of config is the same for both auth methods\n",
            "cat > $CONFIG_FILE << EOF\n",
            "[Globus]\n",
            "ClientId = ", { "Ref": "GlobusClientId" }, "\n",
            "ClientSecret = ", { "Ref": "GlobusClientSecret" }, "\n",
            "\n",
            "[Endpoint]\n",
            "Name = ", { "Ref": "GlobusDisplayName" }, "\n",
            "Public = True\n",
            "DefaultDirectory = /\n",
            "EOF\n",
            "# Security section varies by auth method\n",
            "if [ \"", { "Ref": "AuthenticationMethod" }, "\" = \"Globus\" ]; then\n",
            "  cat >> $CONFIG_FILE << EOF\n",
            "[Security]\n",
            "Authentication = Globus\n",
            "IdentityMethod = OAuth\n",
            "RequireEncryption = True\n",
            "Authorization = True\n",
            "EOF\n",
            "else\n",
            "  cat >> $CONFIG_FILE << EOF\n",
            "[Security]\n",
            "FetchCredentialFromRelay = True\n",
            "IdentityMethod = MyProxy\n",
            "Authorization = False\n",
            "EOF\n",
            "fi\n",
            "# Add GridFTP section\n",
            "cat >> $CONFIG_FILE << EOF\n",
            "[GridFTP]\n",
            "Server = $HOST\n",
            "IncomingPortRange = 50000,51000\n",
            "OutgoingPortRange = 50000,51000\n",
            "RestrictPaths = \n",
            "Sharing = True\n",
            "SharingRestrictPaths = \n",
            "EOF\n",
            "# Configure S3 connector if needed\n",
            "if [ \"", { "Ref": "EnableS3Connector" }, "\" = \"true\" ] && [ \"", { "Ref": "S3BucketName" }, "\" != \"\" ]; then\n",
            "  mkdir -p /opt/globus-connect-server-s3\n",
            "  echo '{\"canonical_name\":\"s3_storage\",\"display_name\":\"S3 Connector\",\"storage_type\":\"s3\",\"connector_type\":\"s3\",\"authentication_method\":\"aws_s3_path_style\",\"configuration\":{\"credentials_type\":\"role\",\"bucket\":\"", { "Ref": "S3BucketName" }, "\"}}' > /opt/globus-connect-server-s3/s3_connector.json\n",
            "fi\n",
            "# Setup helper script and credentials files\n",
            "echo \"Creating run-globus-setup.sh helper script...\" | tee -a /home/ubuntu/cloud-init-debug.log\n",
            "# Ensure ubuntu home directory exists\n",
            "mkdir -p /home/ubuntu\n",
            "chown ubuntu:ubuntu /home/ubuntu\n",
            "# Create the helper script with error checking\n",
            "cat > /home/ubuntu/run-globus-setup.sh << 'EOF'\n",
            "#!/bin/bash\n",
            "# Get credentials from args or files\n",
            "[ -z \"$1\" ] && [ -f /home/ubuntu/globus-client-id.txt ] && GC_ID=$(cat /home/ubuntu/globus-client-id.txt) || GC_ID=\"$1\"\n",
            "[ -z \"$2\" ] && [ -f /home/ubuntu/globus-client-secret.txt ] && GC_SECRET=$(cat /home/ubuntu/globus-client-secret.txt) || GC_SECRET=\"$2\"\n",
            "[ -z \"$3\" ] && [ -f /home/ubuntu/globus-display-name.txt ] && GC_NAME=$(cat /home/ubuntu/globus-display-name.txt) || GC_NAME=\"$3\"\n",
            "\n",
            "echo \"Running Globus endpoint setup with:\"\n",
            "echo \"- Client ID: $(echo $GC_ID | cut -c1-5)... (truncated)\"\n",
            "echo \"- Display Name: $GC_NAME\"\n",
            "\n",
            "# Check for existing endpoint with same name\n",
            "echo \"Checking for existing endpoint with the same name...\"\n",
            "EXISTING_ENDPOINT=$(globus-connect-server endpoint list 2>/dev/null | grep -F \"$GC_NAME\" || echo \"\")\n",
            "\n",
            "if [ -n \"$EXISTING_ENDPOINT\" ]; then\n",
            "  echo \"WARNING: An endpoint with name '$GC_NAME' already exists!\"\n",
            "  echo \"Existing endpoint details:\"\n",
            "  echo \"$EXISTING_ENDPOINT\"\n",
            "  \n",
            "  # Extract endpoint ID if possible\n",
            "  ENDPOINT_ID=$(echo \"$EXISTING_ENDPOINT\" | awk '{print $1}')\n",
            "  if [ -n \"$ENDPOINT_ID\" ]; then\n",
            "    echo \"Using existing endpoint ID: $ENDPOINT_ID\"\n",
            "    echo \"$ENDPOINT_ID\" > /home/ubuntu/existing-endpoint-id.txt\n",
            "  else\n",
            "    echo \"Could not extract endpoint ID, proceeding with setup anyway\"\n",
            "  fi\n",
            "fi\n",
            "\n",
            "# Try setup with correct parameter name for older versions\n",
            "echo \"Setting up Globus endpoint...\"\n",
            "globus-connect-server endpoint setup --client-id \"$GC_ID\" --secret \"$GC_SECRET\" --display-name \"$GC_NAME\" --organization \"AWS\"\n",
            "\n",
            "# Show result\n",
            "echo \"Setup complete! Endpoint details:\"\n",
            "globus-connect-server endpoint show\n",
            "EOF\n",
            "if [ -f /home/ubuntu/run-globus-setup.sh ]; then\n",
            "  chmod +x /home/ubuntu/run-globus-setup.sh\n",
            "  chown ubuntu:ubuntu /home/ubuntu/run-globus-setup.sh\n",
            "  echo \"Helper script created successfully at /home/ubuntu/run-globus-setup.sh\" | tee -a /home/ubuntu/cloud-init-debug.log\n",
            "else\n",
            "  echo \"ERROR: Failed to create helper script!\" | tee -a /home/ubuntu/cloud-init-debug.log\n",
            "  # Try an alternative approach - create it using echo\n",
            "  echo '#!/bin/bash' > /home/ubuntu/run-globus-setup.sh\n",
            "  echo '# Manual setup script for Globus' >> /home/ubuntu/run-globus-setup.sh\n",
            "  echo 'GC_ID=${1:-$(cat /home/ubuntu/globus-client-id.txt 2>/dev/null)}' >> /home/ubuntu/run-globus-setup.sh\n",
            "  echo 'GC_SECRET=${2:-$(cat /home/ubuntu/globus-client-secret.txt 2>/dev/null)}' >> /home/ubuntu/run-globus-setup.sh\n",
            "  echo 'GC_NAME=${3:-$(cat /home/ubuntu/globus-display-name.txt 2>/dev/null)}' >> /home/ubuntu/run-globus-setup.sh\n",
            "  echo 'globus-connect-server endpoint setup --client-id \"$GC_ID\" --secret \"$GC_SECRET\" --display-name \"$GC_NAME\" --organization \"AWS\"' >> /home/ubuntu/run-globus-setup.sh\n",
            "  chmod +x /home/ubuntu/run-globus-setup.sh\n",
            "  chown ubuntu:ubuntu /home/ubuntu/run-globus-setup.sh\n",
            "fi\n",
            "# Store credentials and deployment details for troubleshooting\n",
            "echo \"Storing credentials for troubleshooting...\" | tee -a /home/ubuntu/cloud-init-debug.log\n",
            "# Store each credential file separately with error checking\n",
            "echo \"", { "Ref": "GlobusClientId" }, "\" > /home/ubuntu/globus-client-id.txt && \\\n",
            "  chmod 600 /home/ubuntu/globus-client-id.txt && \\\n",
            "  chown ubuntu:ubuntu /home/ubuntu/globus-client-id.txt && \\\n",
            "  echo \"- Created client ID file\" >> /home/ubuntu/cloud-init-debug.log || \\\n",
            "  echo \"ERROR: Failed to create client ID file\" | tee -a /home/ubuntu/cloud-init-debug.log\n",
            "echo \"", { "Ref": "GlobusClientSecret" }, "\" > /home/ubuntu/globus-client-secret.txt && \\\n",
            "  chmod 600 /home/ubuntu/globus-client-secret.txt && \\\n",
            "  chown ubuntu:ubuntu /home/ubuntu/globus-client-secret.txt && \\\n",
            "  echo \"- Created client secret file\" >> /home/ubuntu/cloud-init-debug.log || \\\n",
            "  echo \"ERROR: Failed to create client secret file\" | tee -a /home/ubuntu/cloud-init-debug.log\n",
            "echo \"", { "Ref": "GlobusDisplayName" }, "\" > /home/ubuntu/globus-display-name.txt && \\\n",
            "  chmod 600 /home/ubuntu/globus-display-name.txt && \\\n",
            "  chown ubuntu:ubuntu /home/ubuntu/globus-display-name.txt && \\\n",
            "  echo \"- Created display name file\" >> /home/ubuntu/cloud-init-debug.log || \\\n",
            "  echo \"ERROR: Failed to create display name file\" | tee -a /home/ubuntu/cloud-init-debug.log\n",
            "# Create a deployment log that can be checked for \"scripts-user\" errors\n",
            "echo \"Checking for cloud-init script-user issues...\"\n",
            "if grep -q \"Failed to run module scripts-user\" /var/log/cloud-init.log 2>/dev/null; then\n",
            "  echo \"WARNING: Found 'Failed to run module scripts-user' in cloud-init logs.\" > /home/ubuntu/cloud-init-warning.txt\n",
            "  echo \"This warning can sometimes be ignored if the deployment completes successfully.\" >> /home/ubuntu/cloud-init-warning.txt\n",
            "  echo \"Checking if we're still running...\" >> /home/ubuntu/cloud-init-warning.txt\n",
            "  echo \"Current script PID: $$\" >> /home/ubuntu/cloud-init-warning.txt\n",
            "  ps -ef | grep cloud-init >> /home/ubuntu/cloud-init-warning.txt\n",
            "else\n",
            "  echo \"No cloud-init script-user issues detected.\" > /home/ubuntu/cloud-init-warning.txt\n",
            "fi\n",
            "# Attempt setup with appropriate method\n",
            "SETUP_LOG=\"/var/log/globus-setup.log\"\n",
            "echo \"Starting Globus Connect Server setup $(date)\" > $SETUP_LOG\n",
            "# Check if endpoint already exists\n",
            "echo \"Checking for existing endpoint with the same name...\" > $SETUP_LOG\n",
            "EXISTING_ENDPOINT=$(globus-connect-server endpoint list 2>/dev/null | grep -F \"", { "Ref": "GlobusDisplayName" }, "\" || echo \"\")\n",
            "if [ -n \"$EXISTING_ENDPOINT\" ]; then\n",
            "  echo \"WARNING: An endpoint with name '", { "Ref": "GlobusDisplayName" }, "' already exists!\" | tee -a $SETUP_LOG\n",
            "  echo \"Existing endpoint details:\" | tee -a $SETUP_LOG\n",
            "  echo \"$EXISTING_ENDPOINT\" | tee -a $SETUP_LOG\n",
            "  # Extract endpoint ID if possible to use existing endpoint\n",
            "  ENDPOINT_ID=$(echo \"$EXISTING_ENDPOINT\" | awk '{print $1}')\n",
            "  if [ -n \"$ENDPOINT_ID\" ]; then\n",
            "    echo \"Using existing endpoint ID: $ENDPOINT_ID\" | tee -a $SETUP_LOG\n",
            "    echo \"$ENDPOINT_ID\" > /home/ubuntu/existing-endpoint-id.txt\n",
            "    SETUP_STATUS=0  # Not an error, we'll use existing endpoint\n",
            "  else\n",
            "    echo \"ERROR: Could not extract endpoint ID from existing endpoint.\" | tee -a $SETUP_LOG\n",
            "    SETUP_STATUS=1\n",
            "  fi\n",
            "else\n",
            "  # No existing endpoint, create a new one\n",
            "  echo \"No existing endpoint found. Creating new endpoint...\" | tee -a $SETUP_LOG\n",
            "  # Use the correct parameter name for pre-5.4.61 versions\n",
            "  globus-connect-server endpoint setup --client-id \"", { "Ref": "GlobusClientId" }, "\" --secret \"", { "Ref": "GlobusClientSecret" }, "\" \\\n",
            "    --display-name \"", { "Ref": "GlobusDisplayName" }, "\" --organization \"AWS\" >> $SETUP_LOG 2>&1\n",
            "  SETUP_STATUS=$?\n",
            "fi\n",
            "# Diagnostics and reporting\n",
            "SYSTEM_INFO=\"System: $(uname -a) Host: $(hostname -f) Packages: $(dpkg -l | grep -c globus)\"\n",
            "echo \"$SYSTEM_INFO\" > /home/ubuntu/globus-setup-diag.log\n",
            "cp $SETUP_LOG /home/ubuntu/globus-setup-complete.log\n",
            "# Record setup status\n",
            "[ $SETUP_STATUS -eq 124 ] && echo \"FAILURE_REASON=TIMEOUT\" > /home/ubuntu/globus-setup-failed.txt || \\\n",
            "[ $SETUP_STATUS -ne 0 ] && echo \"FAILURE_REASON=ERROR_CODE_$SETUP_STATUS\" > /home/ubuntu/globus-setup-failed.txt || \\\n",
            "echo \"SETUP_FAILED=false\" > /home/ubuntu/globus-setup-failed.txt\n",
            "# Configure admin access if specified\n",
            "if [ \"", { "Ref": "AuthenticationMethod" }, "\" = \"Globus\" ] && [ \"", { "Ref": "DefaultAdminIdentity" }, "\" != \"\" ]; then\n",
            "  for try in {1..3}; do\n",
            "    sleep 5\n",
            "    globus-connect-server endpoint permission create --permissions read,write --principal \"", { "Ref": "DefaultAdminIdentity" }, "\" --path \"/\" && break\n",
            "  done\n",
            "fi\n",
            "# Configure S3 connector if subscription exists\n",
            "if [ -n \"", { "Ref": "GlobusSubscriptionId" }, "\" ]; then\n",
            "  # S3 connector - check command availability first\n",
            "  if [ \"", { "Ref": "EnableS3Connector" }, "\" = \"true\" ] && [ \"", { "Ref": "S3BucketName" }, "\" != \"\" ] && aws s3 ls \"s3://", { "Ref": "S3BucketName" }, "\" >/dev/null 2>&1; then\n",
            "    # Check if the command supports storage-gateway\n",
            "    if globus-connect-server help 2>&1 | grep -q \"storage-gateway\"; then\n",
            "      globus-connect-server storage-gateway create --connector-id s3_storage --display-name \"S3 Connector\" \\\n",
            "        --connector-type s3 --authentication-method aws_s3_path_style --credentials-type role --bucket ", { "Ref": "S3BucketName" }, "\n",
            "    else\n",
            "      echo \"WARNING: This version of Globus does not support the storage-gateway command\" | tee -a $SETUP_LOG\n",
            "    fi\n",
            "  fi\n",
            "  # Join subscription\n",
            "  pip3 install -q globus-cli\n",
            "  mkdir -p ~/.globus && echo -e \"[cli]\\ndefault_client_id = ", { "Ref": "GlobusClientId" }, "\\n\" > ~/.globus/globus.cfg\n",
            "  # Add secret instead of client_secret for compatibility\n",
            "  echo -e \"default_client_secret = ", { "Ref": "GlobusClientSecret" }, "\" >> ~/.globus/globus.cfg\n",
            "  sleep 5\n",
            "  ENDPOINT_ID=$(globus-connect-server endpoint show 2>/dev/null | grep -E 'UUID|ID' | awk '{print $2}' | head -1)\n",
            "  [ -n \"$ENDPOINT_ID\" ] && globus-connect-server endpoint update --subscription-id \"", { "Ref": "GlobusSubscriptionId" }, "\" --display-name \"", { "Ref": "GlobusDisplayName" }, "\"\n",
            "fi\n",
            "# Enable services and tag instance\n",
            "[ -f /lib/systemd/system/globus-gridftp-server.service ] && systemctl enable globus-gridftp-server && systemctl start globus-gridftp-server\n",
            "INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\n",
            "aws ec2 create-tags --resources $INSTANCE_ID --tags Key=GlobusInstalled,Value=true --region ", { "Ref": "AWS::Region" }, " || true\n",
            "# Create minimal deployment summary\n",
            "echo \"Deployment: $(date) Instance:$INSTANCE_ID Type:", { "Ref": "DeploymentType" }, " Auth:", { "Ref": "AuthenticationMethod" }, " S3:", { "Ref": "EnableS3Connector" }, "\" > /home/ubuntu/deployment-summary.txt\n",
            "# ===== Final deployment steps and diagnostics =====\n",
            "echo \"===== [9/10] Collecting diagnostic information =====\" | tee -a /home/ubuntu/cloud-init-debug.log\n",
            "# Copy cloud-init logs for debugging\n",
            "echo \"Collecting cloud-init logs...\" >> /home/ubuntu/cloud-init-debug.log\n",
            "for logfile in /var/log/cloud-init.log /var/log/cloud-init-output.log /var/log/user-data.log; do\n",
            "  if [ -f \"$logfile\" ]; then\n",
            "    cp \"$logfile\" \"/home/ubuntu/$(basename $logfile)\"\n",
            "    echo \"Copied $logfile\" >> /home/ubuntu/cloud-init-debug.log\n",
            "  else\n",
            "    echo \"WARNING: $logfile not found\" >> /home/ubuntu/cloud-init-debug.log\n",
            "  fi\n",
            "done\n",
            "# Collect cloud-init diagnostics\n",
            "echo \"Cloud-init diagnostics:\" >> /home/ubuntu/cloud-init-debug.log\n",
            "cloud-init status >> /home/ubuntu/cloud-init-debug.log 2>&1 || echo \"Could not get cloud-init status\" >> /home/ubuntu/cloud-init-debug.log\n",
            "# Check for scripts-user module errors\n",
            "if grep -q \"Failed to run module scripts-user\" /var/log/cloud-init.log 2>/dev/null; then\n",
            "  echo \"NOTICE: Found 'Failed to run module scripts-user' in cloud-init logs.\" > /home/ubuntu/cloud-init-modules.log\n",
            "  echo \"Checking part files in /var/lib/cloud/instance/scripts/:\" >> /home/ubuntu/cloud-init-modules.log\n",
            "  ls -la /var/lib/cloud/instance/scripts/ >> /home/ubuntu/cloud-init-modules.log 2>&1\n",
            "  # Extract the relevant errors\n",
            "  grep -A10 \"Failed to run module scripts-user\" /var/log/cloud-init.log >> /home/ubuntu/cloud-init-modules.log\n",
            "fi\n",
            "# Copy CloudFormation logs\n",
            "if [ -f /var/log/cfn-init.log ]; then\n",
            "  cp /var/log/cfn-init.log /home/ubuntu/cfn-init.log\n",
            "fi\n",
            "if [ -f /var/log/cfn-init-cmd.log ]; then \n",
            "  cp /var/log/cfn-init-cmd.log /home/ubuntu/cfn-init-cmd.log\n",
            "fi\n",
            "# Create a status summary file\n",
            "echo \"===== [10/10] Finalizing deployment =====\" | tee -a /home/ubuntu/cloud-init-debug.log\n",
            "echo \"Deployment completed at: $(date)\" > /home/ubuntu/deployment-summary.txt\n",
            "echo \"Globus installation status: $(dpkg -l | grep -c globus-connect-server)\" >> /home/ubuntu/deployment-summary.txt\n",
            "echo \"Globus command found: $(which globus-connect-server || echo \"NOT FOUND\")\" >> /home/ubuntu/deployment-summary.txt\n",
            "echo \"Cloud-init status: $(cloud-init status 2>&1 || echo \"Could not determine\")\" >> /home/ubuntu/deployment-summary.txt\n",
            "# Make sure we wait a bit to allow any background processes to complete\n",
            "sleep 5\n",
            "echo \"Signaling CloudFormation stack that deployment is complete\"\n",
            "# Signal success to CloudFormation\n",
            "# Explicitly setting status to 0 to prevent cloud-init errors from failing the stack\n",
            "/opt/aws/bin/cfn-signal -e 0 --stack ", { "Ref": "AWS::StackName" }, " --resource GlobusServerInstance --region ", { "Ref": "AWS::Region" }, " || echo \"WARNING: cfn-signal failed\" > /home/ubuntu/cfn-signal-failed.txt\n",
            "# Important: Mark the end of our script for proper cloud-init completion\n",
            "echo \"=== GLOBUS-CONNECT-SERVER-DEPLOYMENT-COMPLETE ===\"\n",
            "exit 0  # Explicitly exit with success code for cloud-init\n"
          ]]
      Tags:
        - Key: Name
          Value: globus-connect-server
          
  GlobusServerIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Condition: UseElasticIP
    Properties:
      AllocationId: !GetAtt GlobusServerElasticIP.AllocationId
      InstanceId: !Ref GlobusServerInstance

Outputs:
  InstanceId:
    Description: Instance ID of the Globus Connect Server
    Value: !Ref GlobusServerInstance

  PrivateIP:
    Description: Private IP address of the Globus Connect Server
    Value: !GetAtt GlobusServerInstance.PrivateIp

  ElasticIP:
    Description: Elastic IP address assigned to the Globus Connect Server
    Condition: UseElasticIP
    Value: !Ref GlobusServerElasticIP
    
  PublicDNS:
    Description: Public DNS name of the Globus Connect Server
    Value: !GetAtt GlobusServerInstance.PublicDnsName

  GlobusEndpointURL:
    Description: URL to access the Globus Endpoint
    Value: "https://app.globus.org/file-manager (Search for endpoint by name or UUID after registration)"
    
  SubscriptionStatus:
    Description: Globus Subscription Status
    Value: !If [HasSubscription, "Endpoint joined to subscription", "No subscription ID provided"]
    
  PublicAddress:
    Description: Public address to use for Globus redirect URI configuration
    Value: !If 
      - UseElasticIP
      - !Join ["", ["https://", !GetAtt GlobusServerElasticIP.PublicIp]]
      - !Sub "https://${GlobusServerInstance.PublicDnsName}"

  S3BucketConnected:
    Description: S3 Bucket connected to Globus
    Condition: DeployS3Connector
    Value: !Ref S3BucketName
    
  ConnectorsEnabled:
    Description: Connectors that were enabled for this deployment
    Value: !If 
      - DeployS3Connector
      - "S3 Connector"
      - "No connectors enabled (subscription required or S3 not enabled)"
    
  DeploymentConfiguration:
    Description: Deployment configuration information
    Value: !If 
      - UseElasticIP
      - !If [IsProduction, "Production deployment with Elastic IP", "Integration deployment with Elastic IP (forced)"]
      - "Integration deployment with dynamic public IP"
      
  AuthenticationConfiguration:
    Description: Authentication method configured for Globus
    Value: !If 
      - UseGlobusAuth
      - "Globus Auth (identity federation)"
      - "MyProxy (local accounts required)"
      
  InitialAccessInfo:
    Description: Initial access configuration
    Value: !If
      - UseGlobusAuth
      - !If 
        - HasDefaultAdmin
        - !Join ["", ["Admin access granted to ", !Ref DefaultAdminIdentity]]
        - "No default admin configured - access policies must be set manually"
      - "Using MyProxy authentication - local accounts required"