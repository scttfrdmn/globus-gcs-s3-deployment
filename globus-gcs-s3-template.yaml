AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template for Globus Connect Server with S3 Connector"

Conditions:
  HasSubscription: !Not [!Equals [!Ref GlobusSubscriptionId, ""]]
  IsProduction: !Equals [!Ref DeploymentType, "Production"]
  UseElasticIP: !Or [!Equals [!Ref DeploymentType, "Production"], !Equals [!Ref ForceElasticIP, "true"]]
  HasS3BucketName: !Not [!Equals [!Ref S3BucketName, ""]]
  DeployS3Connector: !And [!Equals [!Ref EnableS3Connector, "true"], !Condition HasSubscription, !Condition HasS3BucketName]
  DeployPosixConnector: !And [!Equals [!Ref EnablePosixConnector, "true"], !Condition HasSubscription]
  DeployGoogleDriveConnector: !And [!Equals [!Ref EnableGoogleDriveConnector, "true"], !Condition HasSubscription]
  UseGlobusAuth: !Equals [!Ref AuthenticationMethod, "Globus"]
  HasDefaultAdmin: !Not [!Equals [!Ref DefaultAdminIdentity, ""]]

Parameters:
  DeploymentType:
    Description: Type of deployment (affects resource configuration)
    Type: String
    Default: Integration
    AllowedValues:
      - Integration
      - Production
    ConstraintDescription: Must be either Integration or Production.
    
  ForceElasticIP:
    Description: Force allocation of Elastic IP even for Integration deployment
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
    
  AuthenticationMethod:
    Description: Authentication method for the Globus Connect Server
    Type: String
    Default: Globus
    AllowedValues:
      - Globus
      - MyProxy
    ConstraintDescription: Must be either Globus (for identity federation) or MyProxy (for local accounts).
    
  DefaultAdminIdentity:
    Description: Globus identity to be granted admin access (email@example.org)
    Type: String
    Default: ""

  InstanceType:
    Description: EC2 instance type for Globus Connect Server
    Type: String
    Default: m6i.xlarge
    AllowedValues:
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5n.xlarge
      - m5n.2xlarge
      - m5n.4xlarge
      - m6i.xlarge
      - m6i.2xlarge
      - m6i.4xlarge
      - m6in.xlarge
      - m6in.2xlarge
      - m6in.4xlarge
    ConstraintDescription: Must be a valid EC2 instance type.

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.

  AvailabilityZone:
    Description: The Availability Zone to launch the instance in
    Type: AWS::EC2::AvailabilityZone::Name

  VpcId:
    Description: VPC to deploy Globus Connect Server into
    Type: AWS::EC2::VPC::Id

  SubnetId:
    Description: Subnet within the selected VPC and Availability Zone
    Type: AWS::EC2::Subnet::Id

# S3BucketName parameter moved below with the other connector parameters

  GlobusClientId:
    Description: Globus Client ID for registration
    Type: String
    NoEcho: true

  GlobusClientSecret:
    Description: Globus Client Secret for registration
    Type: String
    NoEcho: true

  GlobusSubscriptionId:
    Description: (Optional) Globus Subscription ID to join this endpoint to your subscription
    Type: String
    Default: ""
    
  # Connector options
  EnableS3Connector:
    Description: Enable S3 Connector (requires subscription)
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    
  EnablePosixConnector:
    Description: Enable POSIX Connector for local filesystem access (requires subscription)
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
    
  EnableGoogleDriveConnector:
    Description: Enable Google Drive Connector (requires subscription)
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"

  # Connector specific parameters
  S3BucketName:
    Description: Name of S3 bucket to connect (if S3 Connector is enabled)
    Type: String
    Default: ""
    AllowedPattern: "^$|[a-zA-Z0-9\\-\\.]{3,63}"
    ConstraintDescription: Bucket name must be between 3 and 63 characters, contain only letters, numbers, hyphens, and periods.
    
  PosixPath:
    Description: Local filesystem path for POSIX Connector (if enabled)
    Type: String
    Default: "/data"

  GlobusDisplayName:
    Description: Display name for the Globus endpoint
    Type: String
    Default: "AWS-GCS-S3-Endpoint"

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-01896de842c443b1b # Ubuntu 22.04 LTS AMI in us-east-1
    us-east-2:
      AMI: ami-0e83be366243f524a # Ubuntu 22.04 LTS AMI in us-east-2
    us-west-1:
      AMI: ami-0487b1fe60c1fd1a2 # Ubuntu 22.04 LTS AMI in us-west-1
    us-west-2:
      AMI: ami-03f65b8614a860c29 # Ubuntu 22.04 LTS AMI in us-west-2
    eu-west-1:
      AMI: ami-0ec7f9846a9d38ac7 # Ubuntu 22.04 LTS AMI in eu-west-1
    eu-central-1:
      AMI: ami-0caef02b518350c8f # Ubuntu 22.04 LTS AMI in eu-central-1
    ap-northeast-1:
      AMI: ami-03a2bb16327aeaa38 # Ubuntu 22.04 LTS AMI in ap-northeast-1
    ap-southeast-1:
      AMI: ami-078c2ea6f5c9de06a # Ubuntu 22.04 LTS AMI in ap-southeast-1
    ap-southeast-2:
      AMI: ami-0d0af5dfe4b9ecf54 # Ubuntu 22.04 LTS AMI in ap-southeast-2

Resources:
  GlobusServerElasticIP:
    Type: AWS::EC2::EIP
    Condition: UseElasticIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: globus-server-eip
          
  GlobusServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and Globus Connect Server ports
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS for Globus Connect Server
        - IpProtocol: tcp
          FromPort: 2811
          ToPort: 2811
          CidrIp: 0.0.0.0/0
          Description: GridFTP control channel
        - IpProtocol: tcp
          FromPort: 7512
          ToPort: 7512
          CidrIp: 0.0.0.0/0
          Description: Globus Connect Server authentication
        - IpProtocol: tcp
          FromPort: 50000
          ToPort: 51000
          CidrIp: 0.0.0.0/0
          Description: GridFTP data channels
      Tags:
        - Key: Name
          Value: globus-server-sg

  GlobusServerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: "/"

  GlobusServerS3Policy:
    Type: AWS::IAM::Policy
    Condition: DeployS3Connector
    Properties:
      PolicyName: GlobusServerS3Access
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetBucketLocation
            Resource: !Sub "arn:aws:s3:::${S3BucketName}"
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
              - s3:ListMultipartUploadParts
              - s3:AbortMultipartUpload
            Resource: !Sub "arn:aws:s3:::${S3BucketName}/*"
          - Effect: Allow
            Action:
              - ec2:CreateTags
            Resource: !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
      Roles:
        - !Ref GlobusServerRole

  GlobusServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref GlobusServerRole

  GlobusServerInstance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      AvailabilityZone: !Ref AvailabilityZone
      IamInstanceProfile: !Ref GlobusServerInstanceProfile
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      NetworkInterfaces:
        - AssociatePublicIpAddress: !If [UseElasticIP, false, true]
          DeviceIndex: "0"
          GroupSet: 
            - !GetAtt GlobusServerSecurityGroup.GroupId
          SubnetId: !Ref SubnetId
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 100
            VolumeType: gp3
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          
          echo "====== Starting Globus Connect Server deployment $(date) ======"
          echo "Stack name: ${AWS::StackName}"
          echo "Region: ${AWS::Region}"
          echo "Deployment type: ${DeploymentType}"
          echo "Authentication method: ${AuthenticationMethod}"
          echo "Connectors enabled:"
          echo "- S3: ${EnableS3Connector}"
          echo "- POSIX: ${EnablePosixConnector}"
          echo "- Google Drive: ${EnableGoogleDriveConnector}"
          echo "========================================================"

          # Error handling function
          function handle_error {
            local ERR_CODE=$1
            local ERR_MSG=$2
            echo "ERROR: $ERR_MSG (Exit code: $ERR_CODE)"
            
            # Create a detailed error report
            echo "ERROR: $ERR_MSG (Exit code: $ERR_CODE)" > /home/ubuntu/deployment-error.txt
            echo "Timestamp: $(date)" >> /home/ubuntu/deployment-error.txt
            echo "Error occurred in script section: $3" >> /home/ubuntu/deployment-error.txt
            
            # Don't signal failure to allow troubleshooting
            if [ "${FAIL_ON_ERROR}" = "yes" ]; then
              # Only fail if explicit failure is requested
              echo "Signaling CloudFormation failure"
              /opt/aws/bin/cfn-signal -e $ERR_CODE --stack ${AWS::StackName} --resource GlobusServerInstance --region ${AWS::Region}
              exit $ERR_CODE
            else
              echo "Error occurred but continuing for troubleshooting purposes"
              # Don't exit, allow script to continue
            fi
          }
          
          # Set to 'no' by default to keep instance alive for troubleshooting
          FAIL_ON_ERROR="no"

          # Install AWS CloudFormation helpers
          apt-get update
          apt-get install -y python3-pip
          pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          mkdir -p /opt/aws/bin
          ln -s /usr/local/bin/cfn-* /opt/aws/bin/

          # Update the system
          apt-get update && apt-get upgrade -y || handle_error $? "Failed to update system packages" "system-update"
          apt-get install -y python3-pip jq curl wget gnupg2 software-properties-common dnsutils || handle_error $? "Failed to install required packages" "package-install"

          # Authentication will be configured when creating the configuration file

          # Install AWS CLI - not critical for troubleshooting
          echo "Installing AWS CLI..."
          pip3 install --upgrade awscli || echo "Warning: AWS CLI installation failed, but continuing"

          # Install Globus Connect Server repository
          curl -LOs https://downloads.globus.org/globus-connect-server/stable/installers/repo/deb/globus-repo_latest_all.deb || handle_error $? "Failed to download Globus repository"
          dpkg -i ./globus-repo_latest_all.deb || handle_error $? "Failed to install Globus repository"
          apt-get update
          
          # Install necessary prerequisites
          apt-get install -y gnupg2 apt-transport-https ca-certificates || handle_error $? "Failed to install prerequisites"
          
          # Add Globus repository signing key
          curl -s https://downloads.globus.org/globus-connect-server/stable/installers/repo/deb/GPG-KEY-Globus | apt-key add - || handle_error $? "Failed to add Globus GPG key"
          
          # Make sure the repository is properly added
          echo "deb https://downloads.globus.org/globus-connect-server/stable/deb ubuntu bionic contrib" > /etc/apt/sources.list.d/globus-connect-server-stable.list
          apt-get update || handle_error $? "Failed to update repositories after adding Globus"
          
          # Install Globus Connect Server
          apt-get install -y globus-connect-server || handle_error $? "Failed to install Globus Connect Server"
          
          # Check installed package and print version info
          echo "Installed Globus packages:"
          dpkg -l | grep globus
          
          # Check command paths
          echo "Globus command path:"
          which globus-connect-server || echo "Could not find globus-connect-server command"
          
          # Check command version and capabilities
          echo "Globus Connect Server version:"
          GCS_VERSION=$(globus-connect-server --version 2>&1 | head -1 | awk '{print $NF}')
          echo "Detected Globus Connect Server version: $GCS_VERSION"
          
          # Check if version is below 5.4.61 (requires explicit client ID)
          if [[ -n "$GCS_VERSION" ]] && [[ $(echo "$GCS_VERSION" | awk -F. '{ printf("%03d%03d%03d\n", $1, $2, $3); }') -lt $(echo "5.4.61" | awk -F. '{ printf("%03d%03d%03d\n", $1, $2, $3); }') ]]; then
            echo "Using a version prior to 5.4.61, will explicitly provide client credentials"
            NEEDS_CLIENT_ID=true
          else
            echo "Using version 5.4.61 or later, no need for explicit client ID with config file"
            NEEDS_CLIENT_ID=false
          fi
          
          # List available Globus commands from PATH
          echo "Available globus commands:"
          find /usr/bin -name "*globus*" || echo "No Globus commands found in /usr/bin"

          # Create Globus configuration directory
          mkdir -p /etc/globus-connect-server

          # Create Globus Connect Server configuration file
          if [ "${AuthenticationMethod}" = "Globus" ]; then
            # Log variables to help with debugging
            echo "DEBUG: Using ClientId for authentication"
            echo "DEBUG: Using ClientSecret for authentication" 
            echo "DEBUG: Endpoint Name: ${GlobusDisplayName}"
            echo "DEBUG: Hostname: $(hostname -f)"
            
            cat > /etc/globus-connect-server/globus-connect-server.conf << EOF
          [Globus]
          ClientId = ${GlobusClientId}
          ClientSecret = ${GlobusClientSecret}

          [Endpoint]
          Name = ${GlobusDisplayName}
          Public = True
          DefaultDirectory = /

          [Security]
          Authentication = Globus
          IdentityMethod = OAuth
          RequireEncryption = True
          Authorization = True
          
          [GridFTP]
          Server = $(hostname -f)
          IncomingPortRange = 50000,51000
          OutgoingPortRange = 50000,51000
          RestrictPaths = 
          Sharing = True
          SharingRestrictPaths = 
          EOF
          else
            # Log variables to help with debugging
            echo "DEBUG: Using ClientId for authentication"
            echo "DEBUG: Using ClientSecret for authentication" 
            echo "DEBUG: Endpoint Name: ${GlobusDisplayName}"
            echo "DEBUG: Hostname: $(hostname -f)"
            
            cat > /etc/globus-connect-server/globus-connect-server.conf << EOF
          [Globus]
          ClientId = ${GlobusClientId}
          ClientSecret = ${GlobusClientSecret}

          [Endpoint]
          Name = ${GlobusDisplayName}
          Public = True
          DefaultDirectory = /

          [Security]
          FetchCredentialFromRelay = True
          IdentityMethod = MyProxy
          Authorization = False
          
          [GridFTP]
          Server = $(hostname -f)
          IncomingPortRange = 50000,51000
          OutgoingPortRange = 50000,51000
          RestrictPaths = 
          Sharing = True
          SharingRestrictPaths = 
          EOF
          fi

          # Configure S3 connector
          mkdir -p /opt/globus-connect-server-s3
          echo "DEBUG: S3BucketName: ${S3BucketName}"
          cat > /opt/globus-connect-server-s3/s3_connector.json << EOF
          {
              "canonical_name": "s3_storage",
              "display_name": "S3 Connector",
              "storage_type": "s3",
              "connector_type": "s3",
              "authentication_method": "aws_s3_path_style",
              "configuration": {
                  "credentials_type": "role",
                  "bucket": "${S3BucketName}"
              }
          }
          EOF

          # Setup and start Globus Connect Server
          echo "====== Starting Globus Connect Server setup $(date) ======"
          echo "This may take several minutes..."
          
          # Create a detailed log file
          SETUP_LOG="/var/log/globus-setup.log"
          
          # Run setup with a timeout of 15 minutes and capture detailed logs
          echo "Running globus-connect-server endpoint setup command..."
          
          # First try to get help to see the available options
          echo "Available commands:" >> $SETUP_LOG
          globus-connect-server --help >> $SETUP_LOG 2>&1
          echo "Endpoint command options:" >> $SETUP_LOG
          globus-connect-server endpoint --help >> $SETUP_LOG 2>&1
          
          # Run the actual setup command with proper parameters based on version
          # First create a debug script that we can run manually for troubleshooting if needed
          cat > /home/ubuntu/run-globus-setup.sh << EOF
#!/bin/bash
echo "Running manual troubleshooting script for Globus Connect Server setup"
export GlobusClientId="${GlobusClientId}"
export GlobusClientSecret="${GlobusClientSecret}"
export GlobusDisplayName="${GlobusDisplayName}"

# Check version
GCS_VERSION=\$(globus-connect-server --version 2>&1 | head -1 | awk '{print \$NF}' || echo "unknown")
echo "Detected Globus Connect Server version: \$GCS_VERSION"

# Try with client credentials
echo "Attempting setup with client credentials..."
globus-connect-server endpoint setup \
  --client-id "\${GlobusClientId}" \
  --client-secret "\${GlobusClientSecret}" \
  --display-name "\${GlobusDisplayName}" \
  --organization "AWS Deployment"
STATUS1=\$?
echo "Setup with client credentials exit code: \$STATUS1"

# Try with config file
echo "Attempting setup with config file..."
globus-connect-server endpoint setup \
  --config-file /etc/globus-connect-server/globus-connect-server.conf
STATUS2=\$?
echo "Setup with config file exit code: \$STATUS2"

# Status report
echo "All done with status codes: \$STATUS1 / \$STATUS2"
EOF
          chmod +x /home/ubuntu/run-globus-setup.sh
          
          # Attempt setup with max verbosity
          if [ "$NEEDS_CLIENT_ID" = true ]; then
            echo "Running endpoint setup with explicit client credentials (pre-5.4.61 mode)..." | tee -a $SETUP_LOG
            set -x  # Turn on command echo for debugging
            globus-connect-server endpoint setup --verbose \
              --client-id "${GlobusClientId}" \
              --client-secret "${GlobusClientSecret}" \
              --display-name "${GlobusDisplayName}" \
              --organization "AWS Deployment" | tee -a $SETUP_LOG 2>&1
            SETUP_STATUS=$?
            set +x  # Turn off command echo
          else
            echo "Running endpoint setup with config file (5.4.61+ mode)..." | tee -a $SETUP_LOG
            set -x  # Turn on command echo for debugging
            globus-connect-server endpoint setup --verbose \
              --config-file /etc/globus-connect-server/globus-connect-server.conf | tee -a $SETUP_LOG 2>&1
            SETUP_STATUS=$?
            set +x  # Turn off command echo
          fi
          
          # Try the fallback approach if the primary approach failed
          if [ $SETUP_STATUS -ne 0 ]; then
            echo "First attempt failed with status $SETUP_STATUS, trying alternative approach..." | tee -a $SETUP_LOG
            
            if [ "$NEEDS_CLIENT_ID" = true ]; then
              # If client ID approach failed, try config file
              echo "Falling back to config file approach..." | tee -a $SETUP_LOG
              set -x  # Turn on command echo for debugging
              globus-connect-server endpoint setup --verbose \
                --config-file /etc/globus-connect-server/globus-connect-server.conf | tee -a $SETUP_LOG 2>&1
              SETUP_STATUS=$?
              set +x  # Turn off command echo
            else
              # If config file approach failed, try client ID
              echo "Falling back to explicit client credentials approach..." | tee -a $SETUP_LOG
              set -x  # Turn on command echo for debugging
              globus-connect-server endpoint setup --verbose \
                --client-id "${GlobusClientId}" \
                --client-secret "${GlobusClientSecret}" \
                --display-name "${GlobusDisplayName}" \
                --organization "AWS Deployment" | tee -a $SETUP_LOG 2>&1
              SETUP_STATUS=$?
              set +x  # Turn off command echo
            fi
          fi
          SETUP_STATUS=$?
          
          # Capture detailed diagnostics about the system and state
          echo "====== DETAILED DIAGNOSTICS ======" 
          echo "System information:"
          uname -a
          
          echo "Network configuration:"
          ip addr
          
          echo "Hostname configuration:"
          hostname -f
          cat /etc/hosts
          
          echo "DNS resolution:"
          nslookup google.com || echo "DNS resolution failed"
          nslookup globus.org || echo "Globus DNS resolution failed"
          
          echo "Globus config file contents:"
          cat /etc/globus-connect-server/globus-connect-server.conf
          
          echo "Globus package status:"
          dpkg -l | grep globus
          
          # Create a failure report for troubleshooting regardless of outcome
          cp $SETUP_LOG /home/ubuntu/globus-setup-complete.log
          
          # Check if the setup timed out
          if [ $SETUP_STATUS -eq 124 ]; then
            echo "ERROR: Globus Connect Server setup timed out after 15 minutes"
            echo "Last 50 lines of setup log:"
            tail -n 50 $SETUP_LOG
            
            # Create debug info
            echo "Created troubleshooting script at /home/ubuntu/run-globus-setup.sh"
            echo "Manual intervention required for troubleshooting."
            # Continue deployment for troubleshooting rather than failing
            echo "SETUP_FAILED=true" > /home/ubuntu/globus-setup-failed.txt
            echo "FAILURE_REASON=TIMEOUT" >> /home/ubuntu/globus-setup-failed.txt
            echo "Keeping instance running for troubleshooting purposes."
            
          elif [ $SETUP_STATUS -ne 0 ]; then
            echo "ERROR: Globus Connect Server setup failed with code $SETUP_STATUS"
            echo "Last 50 lines of setup log:"
            tail -n 50 $SETUP_LOG
            
            # Create debug info
            echo "Created troubleshooting script at /home/ubuntu/run-globus-setup.sh"
            echo "Manual intervention required for troubleshooting."
            # Continue deployment for troubleshooting rather than failing
            echo "SETUP_FAILED=true" > /home/ubuntu/globus-setup-failed.txt
            echo "FAILURE_REASON=ERROR_CODE_$SETUP_STATUS" >> /home/ubuntu/globus-setup-failed.txt
            echo "Keeping instance running for troubleshooting purposes."
            
          else
            echo "Globus Connect Server setup completed successfully"
            echo "SETUP_FAILED=false" > /home/ubuntu/globus-setup-failed.txt
          fi
          
          # Check if essential services are running
          echo "Checking GridFTP service status..."
          systemctl status globus-gridftp-server || echo "WARNING: Globus GridFTP server might not be running after setup"
          
          # List all Globus-related services
          echo "Listing all Globus-related services:"
          systemctl list-units | grep -i globus

          # Set up initial access policy for admin if specified
          if [ "${AuthenticationMethod}" = "Globus" ] && [ "${DefaultAdminIdentity}" != "" ]; then
            echo "Setting up initial access policy for admin: ${DefaultAdminIdentity}"
            # Wait for endpoint to be fully registered
            sleep 30
            
            # Create access policy for admin with full permissions
            # Try to create admin access policy, retrying if it fails
            for i in {1..3}; do
              echo "Attempt $i to create admin access policy..."
              globus-connect-server endpoint permission create \
                --permissions read,write \
                --principal "${DefaultAdminIdentity}" \
                --path "/"
              
              if [ $? -eq 0 ]; then
                echo "Admin access policy created successfully"
                break
              else
                echo "Failed to create admin access policy, attempt $i"
                if [ $i -eq 3 ]; then
                  echo "WARNING: Could not create admin access policy after 3 attempts"
                  echo "You will need to set up access policies manually"
                else
                  sleep 30  # Wait before retrying
                fi
              fi
            done
              
            echo "Admin access policy created"
          fi

          # Configure connectors based on subscription status
          if [ "${GlobusSubscriptionId}" != "" ]; then
            echo "Configuring connectors with subscription ${GlobusSubscriptionId}..."
            
            # Configure S3 connector
            if [ "${EnableS3Connector}" = "true" ] && [ "${S3BucketName}" != "" ]; then
              echo "Setting up S3 connector for bucket ${S3BucketName}..."
              # Verify S3 bucket exists and is accessible
              if aws s3 ls "s3://${S3BucketName}" >/dev/null 2>&1; then
                echo "S3 bucket ${S3BucketName} exists and is accessible"
                globus-connect-server storage-gateway create \
                  --connector-id s3_storage \
                  --display-name "S3 Connector" \
                  --connector-type s3 \
                  --authentication-method aws_s3_path_style \
                  --credentials-type role \
                  --bucket ${S3BucketName}
                if [ $? -eq 0 ]; then
                  echo "S3 connector configured successfully"
                else
                  echo "ERROR: Failed to configure S3 connector"
                  # Signal failure if this was the primary purpose of the deployment
                  if [ "${EnablePosixConnector}" != "true" ] && [ "${EnableGoogleDriveConnector}" != "true" ]; then
                    /opt/aws/bin/cfn-signal -e 1 --stack ${AWS::StackName} --resource GlobusServerInstance --region ${AWS::Region}
                    exit 1
                  fi
                fi
              else
                echo "ERROR: S3 bucket ${S3BucketName} does not exist or is not accessible"
                # Continue with deployment but log error
                echo "Skipping S3 connector setup due to bucket access issues"
              fi
            else
              echo "S3 connector not enabled or no bucket specified"
            fi
            
            # Configure POSIX connector
            if [ "${EnablePosixConnector}" = "true" ]; then
              echo "Setting up POSIX connector for path ${PosixPath}..."
              # Create directory if it doesn't exist
              mkdir -p ${PosixPath}
              chmod 755 ${PosixPath}
              
              globus-connect-server storage-gateway create \
                --connector-id posix_storage \
                --display-name "POSIX Connector" \
                --connector-type posix \
                --root-directory ${PosixPath}
              echo "POSIX connector configured"
            else
              echo "POSIX connector not enabled"
            fi
            
            # Configure Google Drive connector
            if [ "${EnableGoogleDriveConnector}" = "true" ]; then
              echo "Setting up Google Drive connector..."
              globus-connect-server storage-gateway create \
                --connector-id googledrive_storage \
                --display-name "Google Drive Connector" \
                --connector-type google_drive
              echo "Google Drive connector configured"
            else
              echo "Google Drive connector not enabled"
            fi
          else
            echo "No subscription ID provided, skipping connector setup"
          fi

          # List available services first
          echo "Available Globus services:"
          ls -la /lib/systemd/system/globus* || echo "No Globus systemd services found in expected location"
          
          # Try to enable and start the GridFTP server if available
          if [ -f /lib/systemd/system/globus-gridftp-server.service ]; then
            systemctl enable globus-gridftp-server || echo "Warning: Failed to enable Globus GridFTP server"
            systemctl start globus-gridftp-server || echo "Warning: Failed to start Globus GridFTP server"
          else
            echo "Note: The globus-gridftp-server.service file was not found, this may be normal for this version"
            echo "If needed, manually identify the correct service name using: systemctl list-units | grep -i globus"
          fi

          # Add a tag indicating installation is complete
          INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
          aws ec2 create-tags --resources $INSTANCE_ID --tags Key=GlobusInstalled,Value=true --region ${AWS::Region} || echo "Warning: Failed to tag instance but continuing deployment"
          
          # Create a deployment summary file for troubleshooting
          echo "Deployment Summary" > /home/ubuntu/deployment-summary.txt
          echo "=================" >> /home/ubuntu/deployment-summary.txt
          echo "Time: $(date)" >> /home/ubuntu/deployment-summary.txt
          echo "Instance ID: $INSTANCE_ID" >> /home/ubuntu/deployment-summary.txt
          echo "Deployment Type: $DeploymentType" >> /home/ubuntu/deployment-summary.txt
          echo "Authentication Method: $AuthenticationMethod" >> /home/ubuntu/deployment-summary.txt
          echo "" >> /home/ubuntu/deployment-summary.txt
          echo "Connectors Enabled:" >> /home/ubuntu/deployment-summary.txt
          echo "- S3 Connector: $EnableS3Connector" >> /home/ubuntu/deployment-summary.txt
          echo "- POSIX Connector: $EnablePosixConnector" >> /home/ubuntu/deployment-summary.txt
          echo "- Google Drive Connector: $EnableGoogleDriveConnector" >> /home/ubuntu/deployment-summary.txt
          echo "" >> /home/ubuntu/deployment-summary.txt
          echo "Subscription: $GlobusSubscriptionId" >> /home/ubuntu/deployment-summary.txt
          echo "Default Admin: $DefaultAdminIdentity" >> /home/ubuntu/deployment-summary.txt
          echo "" >> /home/ubuntu/deployment-summary.txt
          echo "For detailed logs:" >> /home/ubuntu/deployment-summary.txt
          echo "- /var/log/user-data.log" >> /home/ubuntu/deployment-summary.txt
          echo "- /var/log/cloud-init-output.log" >> /home/ubuntu/deployment-summary.txt
          
          # Always signal success for troubleshooting purposes, even if Globus setup failed
          if [ -f /home/ubuntu/globus-setup-failed.txt ] && [ "$(grep -c "SETUP_FAILED=true" /home/ubuntu/globus-setup-failed.txt)" -gt 0 ]; then
            echo "====== Deployment completed with Globus setup issues ======"
            echo "Instance is kept running for troubleshooting purposes."
            echo "Check logs at /home/ubuntu/globus-setup-complete.log for details."
            echo "Run /home/ubuntu/run-globus-setup.sh for manual setup attempts."
          else
            echo "====== Deployment completed successfully ======"
          fi
          
          # Signal CloudFormation that the instance is ready regardless of Globus status
          # This allows keeping the instance up for troubleshooting
          /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource GlobusServerInstance --region ${AWS::Region}
          
          # Join to Globus subscription if ID is provided
          if [ "${GlobusSubscriptionId}" != "" ]; then
            # Install Globus CLI
            pip3 install globus-cli
            
            # Wait for endpoint to be fully registered
            sleep 30
            
            # Get the endpoint ID
            echo "Getting endpoint information..."
            globus-connect-server endpoint show > /tmp/endpoint_info.txt 2>&1
            cat /tmp/endpoint_info.txt
            ENDPOINT_ID=$(grep -E 'UUID|ID' /tmp/endpoint_info.txt | awk '{print $2}')
            
            if [ ! -z "$ENDPOINT_ID" ]; then
              echo "Found Endpoint ID: $ENDPOINT_ID"
              
              # Create config directory and credentials file for CLI
              mkdir -p ~/.globus
              echo "DEBUG: Creating CLI config file with client credentials"
              cat > ~/.globus/globus.cfg << EOF
          [cli]
          default_client_id = ${GlobusClientId}
          default_client_secret = ${GlobusClientSecret}
          EOF
              # Verify the config file was created successfully
              if [ ! -f ~/.globus/globus.cfg ]; then
                echo "ERROR: Failed to create Globus CLI config file"
                # Create a warning file but continue as this is post-setup
                echo "WARNING: Failed to configure Globus CLI" > /home/ubuntu/globus-cli-config-failed.txt
              else
                echo "DEBUG: Globus CLI config file created successfully"
              fi
              
              # Attempt to join the subscription
              echo "Joining subscription ${GlobusSubscriptionId}..."
              globus-connect-server endpoint update \
                --subscription-id ${GlobusSubscriptionId} \
                --display-name "${GlobusDisplayName}"
              
              # Verify subscription status
              echo "Checking endpoint status after subscription update:"
              globus-connect-server endpoint show | grep -i "subscription\|display"
            else
              echo "Could not determine endpoint ID, manual subscription joining will be required"
            fi
          else
            echo "No subscription ID provided, skipping subscription joining"
          fi
      
      Tags:
        - Key: Name
          Value: globus-connect-server
          
  GlobusServerIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Condition: UseElasticIP
    Properties:
      AllocationId: !GetAtt GlobusServerElasticIP.AllocationId
      InstanceId: !Ref GlobusServerInstance

Outputs:
  InstanceId:
    Description: Instance ID of the Globus Connect Server
    Value: !Ref GlobusServerInstance

  PrivateIP:
    Description: Private IP address of the Globus Connect Server
    Value: !GetAtt GlobusServerInstance.PrivateIp

  ElasticIP:
    Description: Elastic IP address assigned to the Globus Connect Server
    Condition: UseElasticIP
    Value: !Ref GlobusServerElasticIP
    
  PublicDNS:
    Description: Public DNS name of the Globus Connect Server
    Value: !GetAtt GlobusServerInstance.PublicDnsName

  GlobusEndpointURL:
    Description: URL to access the Globus Endpoint
    Value: "https://app.globus.org/file-manager (Search for endpoint by name or UUID after registration)"
    
  SubscriptionStatus:
    Description: Globus Subscription Status
    Value: !If [HasSubscription, "Endpoint joined to subscription", "No subscription ID provided"]
    
  PublicAddress:
    Description: Public address to use for Globus redirect URI configuration
    Value: !If 
      - UseElasticIP
      - !Sub "https://${GlobusServerElasticIP}"
      - !Sub "https://${GlobusServerInstance.PublicDnsName}"

  S3BucketConnected:
    Description: S3 Bucket connected to Globus
    Condition: DeployS3Connector
    Value: !Ref S3BucketName
    
  ConnectorsEnabled:
    Description: Connectors that were enabled for this deployment
    Value: !Join 
      - ", "
      - !If 
        - HasSubscription
        - !Split
          - "|"
          - !Join
            - "|"
            - - !If [DeployS3Connector, "S3", ""]
              - !If [DeployPosixConnector, "POSIX", ""]  
              - !If [DeployGoogleDriveConnector, "Google Drive", ""]
        - ["No connectors (subscription required)"]
    
  DeploymentConfiguration:
    Description: Deployment configuration information
    Value: !If 
      - UseElasticIP
      - !If [IsProduction, "Production deployment with Elastic IP", "Integration deployment with Elastic IP (forced)"]
      - "Integration deployment with dynamic public IP"
      
  AuthenticationConfiguration:
    Description: Authentication method configured for Globus
    Value: !If 
      - UseGlobusAuth
      - "Globus Auth (identity federation)"
      - "MyProxy (local accounts required)"
      
  InitialAccessInfo:
    Description: Initial access configuration
    Value: !If
      - UseGlobusAuth
      - !If 
        - HasDefaultAdmin
        - !Sub "Admin access granted to ${DefaultAdminIdentity}"
        - "No default admin configured - access policies must be set manually"
      - "Using MyProxy authentication - local accounts required"