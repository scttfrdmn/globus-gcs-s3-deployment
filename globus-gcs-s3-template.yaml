AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template for Globus Connect Server with S3 Connector"

Conditions:
  HasSubscription: !Not [!Equals [!Ref GlobusSubscriptionId, ""]]
  IsProduction: !Equals [!Ref DeploymentType, "Production"]
  UseElasticIP: !Or [!Equals [!Ref DeploymentType, "Production"], !Equals [!Ref ForceElasticIP, "true"]]
  HasS3BucketName: !Not [!Equals [!Ref S3BucketName, ""]]
  DeployS3Connector: !And [!Equals [!Ref EnableS3Connector, "true"], !Condition HasSubscription, !Condition HasS3BucketName]
  DeployPosixConnector: !And [!Equals [!Ref EnablePosixConnector, "true"], !Condition HasSubscription]
  DeployGoogleDriveConnector: !And [!Equals [!Ref EnableGoogleDriveConnector, "true"], !Condition HasSubscription]
  UseGlobusAuth: !Equals [!Ref AuthenticationMethod, "Globus"]
  HasDefaultAdmin: !Not [!Equals [!Ref DefaultAdminIdentity, ""]]

Parameters:
  DeploymentType:
    Description: Type of deployment (affects resource configuration)
    Type: String
    Default: Integration
    AllowedValues:
      - Integration
      - Production
    ConstraintDescription: Must be either Integration or Production.
    
  ForceElasticIP:
    Description: Force allocation of Elastic IP even for Integration deployment
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
    
  AuthenticationMethod:
    Description: Authentication method for the Globus Connect Server
    Type: String
    Default: Globus
    AllowedValues:
      - Globus
      - MyProxy
    ConstraintDescription: Must be either Globus (for identity federation) or MyProxy (for local accounts).
    
  DefaultAdminIdentity:
    Description: Globus identity to be granted admin access (email@example.org)
    Type: String
    Default: ""

  InstanceType:
    Description: EC2 instance type for Globus Connect Server
    Type: String
    Default: m6i.xlarge
    AllowedValues:
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5n.xlarge
      - m5n.2xlarge
      - m5n.4xlarge
      - m6i.xlarge
      - m6i.2xlarge
      - m6i.4xlarge
      - m6in.xlarge
      - m6in.2xlarge
      - m6in.4xlarge
    ConstraintDescription: Must be a valid EC2 instance type.

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.

  AvailabilityZone:
    Description: The Availability Zone to launch the instance in
    Type: AWS::EC2::AvailabilityZone::Name

  VpcId:
    Description: VPC to deploy Globus Connect Server into
    Type: AWS::EC2::VPC::Id

  SubnetId:
    Description: Subnet within the selected VPC and Availability Zone
    Type: AWS::EC2::Subnet::Id

# S3BucketName parameter moved below with the other connector parameters

  GlobusClientId:
    Description: Globus Client ID for registration
    Type: String
    NoEcho: true

  GlobusClientSecret:
    Description: Globus Client Secret for registration
    Type: String
    NoEcho: true

  GlobusSubscriptionId:
    Description: (Optional) Globus Subscription ID to join this endpoint to your subscription
    Type: String
    Default: ""
    
  # Connector options
  EnableS3Connector:
    Description: Enable S3 Connector (requires subscription)
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    
  EnablePosixConnector:
    Description: Enable POSIX Connector for local filesystem access (requires subscription)
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
    
  EnableGoogleDriveConnector:
    Description: Enable Google Drive Connector (requires subscription)
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"

  # Connector specific parameters
  S3BucketName:
    Description: Name of S3 bucket to connect (if S3 Connector is enabled)
    Type: String
    Default: ""
    AllowedPattern: "^$|[a-zA-Z0-9\\-\\.]{3,63}"
    ConstraintDescription: Bucket name must be between 3 and 63 characters, contain only letters, numbers, hyphens, and periods.
    
  PosixPath:
    Description: Local filesystem path for POSIX Connector (if enabled)
    Type: String
    Default: "/data"

  GlobusDisplayName:
    Description: Display name for the Globus endpoint
    Type: String
    Default: "AWS-GCS-S3-Endpoint"

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0f3c7d07486cad139 # Amazon Linux 2023 AMI in us-east-1
    us-east-2:
      AMI: ami-0cc87e5027adcdca8 # Amazon Linux 2023 AMI in us-east-2
    us-west-1:
      AMI: ami-0ce2cb35386e3b100 # Amazon Linux 2023 AMI in us-west-1
    us-west-2:
      AMI: ami-008fe2fc65df48dac # Amazon Linux 2023 AMI in us-west-2
    eu-west-1:
      AMI: ami-06d0bbd3c5e5d5055 # Amazon Linux 2023 AMI in eu-west-1
    eu-central-1:
      AMI: ami-0bc77b0b09ab632bf # Amazon Linux 2023 AMI in eu-central-1
    ap-northeast-1:
      AMI: ami-09a5c873bc79530d9 # Amazon Linux 2023 AMI in ap-northeast-1
    ap-southeast-1:
      AMI: ami-0fa377108253bf620 # Amazon Linux 2023 AMI in ap-southeast-1
    ap-southeast-2:
      AMI: ami-04f5097681773b989 # Amazon Linux 2023 AMI in ap-southeast-2

Resources:
  GlobusServerElasticIP:
    Type: AWS::EC2::EIP
    Condition: UseElasticIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: globus-server-eip
          
  GlobusServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and Globus Connect Server ports
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS for Globus Connect Server
        - IpProtocol: tcp
          FromPort: 2811
          ToPort: 2811
          CidrIp: 0.0.0.0/0
          Description: GridFTP control channel
        - IpProtocol: tcp
          FromPort: 7512
          ToPort: 7512
          CidrIp: 0.0.0.0/0
          Description: Globus Connect Server authentication
        - IpProtocol: tcp
          FromPort: 50000
          ToPort: 51000
          CidrIp: 0.0.0.0/0
          Description: GridFTP data channels
      Tags:
        - Key: Name
          Value: globus-server-sg

  GlobusServerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: "/"

  GlobusServerS3Policy:
    Type: AWS::IAM::Policy
    Condition: DeployS3Connector
    Properties:
      PolicyName: GlobusServerS3Access
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetBucketLocation
            Resource: !Sub "arn:aws:s3:::${S3BucketName}"
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
              - s3:ListMultipartUploadParts
              - s3:AbortMultipartUpload
            Resource: !Sub "arn:aws:s3:::${S3BucketName}/*"
          - Effect: Allow
            Action:
              - ec2:CreateTags
            Resource: !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
      Roles:
        - !Ref GlobusServerRole

  GlobusServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref GlobusServerRole

  GlobusServerInstance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      AvailabilityZone: !Ref AvailabilityZone
      IamInstanceProfile: !Ref GlobusServerInstanceProfile
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      NetworkInterfaces:
        - AssociatePublicIpAddress: !If [UseElasticIP, false, true]
          DeviceIndex: "0"
          GroupSet: 
            - !GetAtt GlobusServerSecurityGroup.GroupId
          SubnetId: !Ref SubnetId
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 100
            VolumeType: gp3
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          
          echo "====== Starting Globus Connect Server deployment $(date) ======"
          echo "Stack name: ${AWS::StackName}"
          echo "Region: ${AWS::Region}"
          echo "Deployment type: ${DeploymentType}"
          echo "Authentication method: ${AuthenticationMethod}"
          echo "Connectors enabled:"
          echo "- S3: ${EnableS3Connector}"
          echo "- POSIX: ${EnablePosixConnector}"
          echo "- Google Drive: ${EnableGoogleDriveConnector}"
          echo "========================================================"

          # Error handling function
          function handle_error {
            local ERR_CODE=$1
            local ERR_MSG=$2
            echo "ERROR: $ERR_MSG (Exit code: $ERR_CODE)"
            /opt/aws/bin/cfn-signal -e $ERR_CODE --stack ${AWS::StackName} --resource GlobusServerInstance --region ${AWS::Region}
            exit $ERR_CODE
          }

          # Install AWS CloudFormation helpers
          dnf install -y python3-pip
          pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          mkdir -p /opt/aws/bin
          ln -s /usr/local/bin/cfn-* /opt/aws/bin/

          # Update the system
          dnf update -y || handle_error $? "Failed to update system packages"
          dnf install -y python3-pip jq curl wget gnupg2 || handle_error $? "Failed to install required packages"

          # Authentication will be configured when creating the configuration file

          # Install AWS CLI
          pip3 install --upgrade awscli || handle_error $? "Failed to install AWS CLI"

          # Install Globus Connect Server repository
          curl -LOs https://downloads.globus.org/globus-connect-server/stable/installers/repo/rpm/globus-repo-latest.noarch.rpm || handle_error $? "Failed to download Globus repository"
          dnf install -y ./globus-repo-latest.noarch.rpm || handle_error $? "Failed to install Globus repository"
          dnf install -y globus-connect-server54 || handle_error $? "Failed to install Globus Connect Server"

          # Create Globus configuration directory
          mkdir -p /etc/globus-connect-server

          # Create Globus Connect Server configuration file
          if [ "${AuthenticationMethod}" = "Globus" ]; then
            # Log variables to help with debugging
            echo "DEBUG: Using ClientId for authentication"
            echo "DEBUG: Using ClientSecret for authentication" 
            echo "DEBUG: Endpoint Name: ${GlobusDisplayName}"
            echo "DEBUG: Hostname: $(hostname -f)"
            
            cat > /etc/globus-connect-server/globus-connect-server.conf << EOF
          [Globus]
          ClientId = ${GlobusClientId}
          ClientSecret = ${GlobusClientSecret}

          [Endpoint]
          Name = ${GlobusDisplayName}
          Public = True
          DefaultDirectory = /

          [Security]
          Authentication = Globus
          IdentityMethod = OAuth
          RequireEncryption = True
          Authorization = True
          
          [GridFTP]
          Server = $(hostname -f)
          IncomingPortRange = 50000,51000
          OutgoingPortRange = 50000,51000
          RestrictPaths = 
          Sharing = True
          SharingRestrictPaths = 
          EOF
          else
            # Log variables to help with debugging
            echo "DEBUG: Using ClientId for authentication"
            echo "DEBUG: Using ClientSecret for authentication" 
            echo "DEBUG: Endpoint Name: ${GlobusDisplayName}"
            echo "DEBUG: Hostname: $(hostname -f)"
            
            cat > /etc/globus-connect-server/globus-connect-server.conf << EOF
          [Globus]
          ClientId = ${GlobusClientId}
          ClientSecret = ${GlobusClientSecret}

          [Endpoint]
          Name = ${GlobusDisplayName}
          Public = True
          DefaultDirectory = /

          [Security]
          FetchCredentialFromRelay = True
          IdentityMethod = MyProxy
          Authorization = False
          
          [GridFTP]
          Server = $(hostname -f)
          IncomingPortRange = 50000,51000
          OutgoingPortRange = 50000,51000
          RestrictPaths = 
          Sharing = True
          SharingRestrictPaths = 
          EOF
          fi

          # Configure S3 connector
          mkdir -p /opt/globus-connect-server-s3
          echo "DEBUG: S3BucketName: ${S3BucketName}"
          cat > /opt/globus-connect-server-s3/s3_connector.json << EOF
          {
              "canonical_name": "s3_storage",
              "display_name": "S3 Connector",
              "storage_type": "s3",
              "connector_type": "s3",
              "authentication_method": "aws_s3_path_style",
              "configuration": {
                  "credentials_type": "role",
                  "bucket": "${S3BucketName}"
              }
          }
          EOF

          # Setup and start Globus Connect Server
          echo "====== Starting Globus Connect Server setup $(date) ======"
          echo "This may take several minutes..."
          
          # Create a detailed log file
          SETUP_LOG="/var/log/globus-setup.log"
          
          # Run setup with a timeout of 15 minutes and capture detailed logs
          timeout 900 globus-connect-server-setup > $SETUP_LOG 2>&1
          SETUP_STATUS=$?
          
          # Check if the setup timed out
          if [ $SETUP_STATUS -eq 124 ]; then
            echo "ERROR: Globus Connect Server setup timed out after 15 minutes"
            echo "Last 50 lines of setup log:"
            tail -n 50 $SETUP_LOG
            handle_error 124 "Globus Connect Server setup timed out"
          elif [ $SETUP_STATUS -ne 0 ]; then
            echo "ERROR: Globus Connect Server setup failed with code $SETUP_STATUS"
            echo "Last 50 lines of setup log:"
            tail -n 50 $SETUP_LOG
            handle_error $SETUP_STATUS "Failed to set up Globus Connect Server"
          else
            echo "Globus Connect Server setup completed successfully"
          fi
          
          # Check if essential services are running
          if ! systemctl is-active --quiet globus-gridftp-server; then
            echo "WARNING: Globus GridFTP server is not running after setup"
          fi

          # Set up initial access policy for admin if specified
          if [ "${AuthenticationMethod}" = "Globus" ] && [ "${DefaultAdminIdentity}" != "" ]; then
            echo "Setting up initial access policy for admin: ${DefaultAdminIdentity}"
            # Wait for endpoint to be fully registered
            sleep 30
            
            # Create access policy for admin with full permissions
            # Try to create admin access policy, retrying if it fails
            for i in {1..3}; do
              echo "Attempt $i to create admin access policy..."
              globus-connect-server acl create \
                --permissions read,write \
                --principal "${DefaultAdminIdentity}" \
                --path "/"
              
              if [ $? -eq 0 ]; then
                echo "Admin access policy created successfully"
                break
              else
                echo "Failed to create admin access policy, attempt $i"
                if [ $i -eq 3 ]; then
                  echo "WARNING: Could not create admin access policy after 3 attempts"
                  echo "You will need to set up access policies manually"
                else
                  sleep 30  # Wait before retrying
                fi
              fi
            done
              
            echo "Admin access policy created"
          fi

          # Configure connectors based on subscription status
          if [ "${GlobusSubscriptionId}" != "" ]; then
            echo "Configuring connectors with subscription ${GlobusSubscriptionId}..."
            
            # Configure S3 connector
            if [ "${EnableS3Connector}" = "true" ] && [ "${S3BucketName}" != "" ]; then
              echo "Setting up S3 connector for bucket ${S3BucketName}..."
              # Verify S3 bucket exists and is accessible
              if aws s3 ls "s3://${S3BucketName}" >/dev/null 2>&1; then
                echo "S3 bucket ${S3BucketName} exists and is accessible"
                globus-connect-server storage-gateway create \
                  --connector-id s3_storage \
                  --connector-display-name "S3 Connector" \
                  --connector-type s3 \
                  --authentication-method aws_s3_path_style \
                  --credentials-type role \
                  --s3-bucket ${S3BucketName}
                if [ $? -eq 0 ]; then
                  echo "S3 connector configured successfully"
                else
                  echo "ERROR: Failed to configure S3 connector"
                  # Signal failure if this was the primary purpose of the deployment
                  if [ "${EnablePosixConnector}" != "true" ] && [ "${EnableGoogleDriveConnector}" != "true" ]; then
                    /opt/aws/bin/cfn-signal -e 1 --stack ${AWS::StackName} --resource GlobusServerInstance --region ${AWS::Region}
                    exit 1
                  fi
                fi
              else
                echo "ERROR: S3 bucket ${S3BucketName} does not exist or is not accessible"
                # Continue with deployment but log error
                echo "Skipping S3 connector setup due to bucket access issues"
              fi
            else
              echo "S3 connector not enabled or no bucket specified"
            fi
            
            # Configure POSIX connector
            if [ "${EnablePosixConnector}" = "true" ]; then
              echo "Setting up POSIX connector for path ${PosixPath}..."
              # Create directory if it doesn't exist
              mkdir -p ${PosixPath}
              chmod 755 ${PosixPath}
              
              globus-connect-server storage-gateway create \
                --connector-id posix_storage \
                --connector-display-name "POSIX Connector" \
                --connector-type posix \
                --root-directory ${PosixPath}
              echo "POSIX connector configured"
            else
              echo "POSIX connector not enabled"
            fi
            
            # Configure Google Drive connector
            if [ "${EnableGoogleDriveConnector}" = "true" ]; then
              echo "Setting up Google Drive connector..."
              globus-connect-server storage-gateway create \
                --connector-id googledrive_storage \
                --connector-display-name "Google Drive Connector" \
                --connector-type google_drive
              echo "Google Drive connector configured"
            else
              echo "Google Drive connector not enabled"
            fi
          else
            echo "No subscription ID provided, skipping connector setup"
          fi

          # Enable and start services
          systemctl enable globus-gridftp-server || handle_error $? "Failed to enable Globus GridFTP server"
          systemctl start globus-gridftp-server || handle_error $? "Failed to start Globus GridFTP server"

          # Add a tag indicating installation is complete
          INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
          aws ec2 create-tags --resources $INSTANCE_ID --tags Key=GlobusInstalled,Value=true --region ${AWS::Region} || echo "Warning: Failed to tag instance but continuing deployment"
          
          # Create a deployment summary file for troubleshooting
          echo "Deployment Summary" > /home/ec2-user/deployment-summary.txt
          echo "=================" >> /home/ec2-user/deployment-summary.txt
          echo "Time: $(date)" >> /home/ec2-user/deployment-summary.txt
          echo "Instance ID: $INSTANCE_ID" >> /home/ec2-user/deployment-summary.txt
          echo "Deployment Type: $DeploymentType" >> /home/ec2-user/deployment-summary.txt
          echo "Authentication Method: $AuthenticationMethod" >> /home/ec2-user/deployment-summary.txt
          echo "" >> /home/ec2-user/deployment-summary.txt
          echo "Connectors Enabled:" >> /home/ec2-user/deployment-summary.txt
          echo "- S3 Connector: $EnableS3Connector" >> /home/ec2-user/deployment-summary.txt
          echo "- POSIX Connector: $EnablePosixConnector" >> /home/ec2-user/deployment-summary.txt
          echo "- Google Drive Connector: $EnableGoogleDriveConnector" >> /home/ec2-user/deployment-summary.txt
          echo "" >> /home/ec2-user/deployment-summary.txt
          echo "Subscription: $GlobusSubscriptionId" >> /home/ec2-user/deployment-summary.txt
          echo "Default Admin: $DefaultAdminIdentity" >> /home/ec2-user/deployment-summary.txt
          echo "" >> /home/ec2-user/deployment-summary.txt
          echo "For detailed logs:" >> /home/ec2-user/deployment-summary.txt
          echo "- /var/log/user-data.log" >> /home/ec2-user/deployment-summary.txt
          echo "- /var/log/cloud-init-output.log" >> /home/ec2-user/deployment-summary.txt
          
          echo "====== Deployment completed successfully ======"
          # Signal CloudFormation that the instance is ready
          /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource GlobusServerInstance --region ${AWS::Region}
          
          # Join to Globus subscription if ID is provided
          if [ "${GlobusSubscriptionId}" != "" ]; then
            # Install Globus CLI
            pip3 install globus-cli
            
            # Wait for endpoint to be fully registered
            sleep 30
            
            # Get the endpoint ID
            ENDPOINT_ID=$(globus-connect-server endpoint show | grep 'UUID' | awk '{print $2}')
            
            if [ ! -z "$ENDPOINT_ID" ]; then
              echo "Found Endpoint ID: $ENDPOINT_ID"
              
              # Create config directory and credentials file for CLI
              mkdir -p ~/.globus
              echo "DEBUG: Creating CLI config file with client credentials"
              cat > ~/.globus/globus.cfg << EOF
          [cli]
          default_client_id = ${GlobusClientId}
          default_client_secret = ${GlobusClientSecret}
          EOF
              # Verify the config file was created successfully
              if [ ! -f ~/.globus/globus.cfg ]; then
                echo "ERROR: Failed to create Globus CLI config file"
                # Create a warning file but continue as this is post-setup
                echo "WARNING: Failed to configure Globus CLI" > /home/ec2-user/globus-cli-config-failed.txt
              else
                echo "DEBUG: Globus CLI config file created successfully"
              fi
              
              # Attempt to join the subscription
              echo "Joining subscription ${GlobusSubscriptionId}..."
              globus-connect-server endpoint update --subscription-id ${GlobusSubscriptionId}
              
              # Verify subscription status
              globus-connect-server endpoint show | grep subscription
            else
              echo "Could not determine endpoint ID, manual subscription joining will be required"
            fi
          else
            echo "No subscription ID provided, skipping subscription joining"
          fi
      
      Tags:
        - Key: Name
          Value: globus-connect-server
          
  GlobusServerIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Condition: UseElasticIP
    Properties:
      AllocationId: !GetAtt GlobusServerElasticIP.AllocationId
      InstanceId: !Ref GlobusServerInstance

Outputs:
  InstanceId:
    Description: Instance ID of the Globus Connect Server
    Value: !Ref GlobusServerInstance

  PrivateIP:
    Description: Private IP address of the Globus Connect Server
    Value: !GetAtt GlobusServerInstance.PrivateIp

  ElasticIP:
    Description: Elastic IP address assigned to the Globus Connect Server
    Condition: UseElasticIP
    Value: !Ref GlobusServerElasticIP
    
  PublicDNS:
    Description: Public DNS name of the Globus Connect Server
    Value: !GetAtt GlobusServerInstance.PublicDnsName

  GlobusEndpointURL:
    Description: URL to access the Globus Endpoint
    Value: "https://app.globus.org/file-manager (Search for endpoint by name or UUID after registration)"
    
  SubscriptionStatus:
    Description: Globus Subscription Status
    Value: !If [HasSubscription, "Endpoint joined to subscription", "No subscription ID provided"]
    
  PublicAddress:
    Description: Public address to use for Globus redirect URI configuration
    Value: !If 
      - UseElasticIP
      - !Sub "https://${GlobusServerElasticIP}"
      - !Sub "https://${GlobusServerInstance.PublicDnsName}"

  S3BucketConnected:
    Description: S3 Bucket connected to Globus
    Condition: DeployS3Connector
    Value: !Ref S3BucketName
    
  ConnectorsEnabled:
    Description: Connectors that were enabled for this deployment
    Value: !Join 
      - ", "
      - !If 
        - HasSubscription
        - !Split
          - "|"
          - !Join
            - "|"
            - - !If [DeployS3Connector, "S3", ""]
              - !If [DeployPosixConnector, "POSIX", ""]  
              - !If [DeployGoogleDriveConnector, "Google Drive", ""]
        - ["No connectors (subscription required)"]
    
  DeploymentConfiguration:
    Description: Deployment configuration information
    Value: !If 
      - UseElasticIP
      - !If [IsProduction, "Production deployment with Elastic IP", "Integration deployment with Elastic IP (forced)"]
      - "Integration deployment with dynamic public IP"
      
  AuthenticationConfiguration:
    Description: Authentication method configured for Globus
    Value: !If 
      - UseGlobusAuth
      - "Globus Auth (identity federation)"
      - "MyProxy (local accounts required)"
      
  InitialAccessInfo:
    Description: Initial access configuration
    Value: !If
      - UseGlobusAuth
      - !If 
        - HasDefaultAdmin
        - !Sub "Admin access granted to ${DefaultAdminIdentity}"
        - "No default admin configured - access policies must be set manually"
      - "Using MyProxy authentication - local accounts required"